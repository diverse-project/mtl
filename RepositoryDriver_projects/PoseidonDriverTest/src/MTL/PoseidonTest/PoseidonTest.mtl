/*
 * $Id: PoseidonTest.mtl,v 1.2 2005-01-18 16:45:48 dvojtise Exp $
 *
 * Sample of use of PoseidonDriver
 */
 
library PoseidonTest;
// no extends for this lib
 
// Lib local model
model poseidon_uml_model 	 : RepositoryModel;			// must be conform to UML1.4 MetaModel
model poseidon_uml_metamodel : RepositoryModel;			// must be conform to MOF1.4 MetaModel
model poseidon_mof_metamodel : RepositoryModel;			// must be conform to MOF1.4 MetaModel

// utils libraries
model uml_utils    : UML_Utils;
model umlDi_utils  : UMLDi_Utils;

// Library level methods
// ---------------------
// Typed model 

// Library contructors
// -------------------






main(args : Standard::Sequence):Standard::Void 
{
	argsParser 			: ArgumentsParser;
	param1				: Standard::String;
	modelManager		: PoseidonDriver::PoseidonModelManager;
	msg					: Standard::String;
	logger				: PoseidonTools::StaticMessageHandler;
	
	aTransformation   : MyTransformation;

	'MTL code begin'.toOut();		
	
	// use Poseidon logger
	logger := new PoseidonTools::StaticMessageHandler();
	
	// we initialize the arguments parser
	argsParser := new ArgumentsParser ();
	argsParser.init (args);
	
	param1 := argsParser.getArg();
	logger.appendText('parameter1 = ');
	logger.appendText(param1);
	logger.appendText('\n');
	
	
	
	// connect the models
	modelManager := new PoseidonDriver::PoseidonModelManager();
	
	modelManager.init();
	msg := modelManager.getPoseidonCurrentModelExtentName();
	msg.toOut();
	
	poseidon_uml_model := modelManager.getPoseidonModel('M1_Uml1UserModelExtent');
	// we initialize the uml utils
    uml_utils 	:= new UML_Utils ().init(poseidon_uml_model);
    umlDi_utils := new UMLDi_Utils ().init(poseidon_uml_model);

   
	
	aTransformation := new MyTransformation();
	aTransformation.init(logger);
	aTransformation.showContent();
	aTransformation.run();
	
	modelManager.storeModel('M1_Uml1UserModelExtent');
	//modelManager.disposeModel('M1_Uml1UserModelExtent');
	'MTL code end'.toOut();
}	

class MyTransformation
{
	logger				: PoseidonTools::StaticMessageHandler;
	umlDiQuery			: UMLDi_Utils::UMLDiQuery;
	umlDiBuilder		: UMLDi_Utils::UMLDiBuilder;
	
	
	init( aLogger : PoseidonTools::StaticMessageHandler)
	{
	 	logger 			:= aLogger;
		umlDiQuery 		:= new umlDi_utils::UMLDiQuery().init(poseidon_uml_model);
		umlDiBuilder 	:= new umlDi_utils::UMLDiBuilder().init(poseidon_uml_model);
	}
	showContent()
	{
		logger.appendText('name of all instances of Core::Class\n');
		foreach (c : poseidon_uml_model::Core::Class)
		{
			logger.appendText(c.name.oclAsType(!Standard::String!));
			logger.appendText('\n');
		}
	}
	////////////////////////////////////////////////////////////////////////////////////
	run ()
	{
		attributeIterator : Standard::Iterator;
		anAttribute       : poseidon_uml_model::Core::Attribute;	
	
		
		
		attributeIterator := !poseidon_uml_model::Core::Attribute!.allInstances().getNewIterator();
		attributeIterator.start();
		while attributeIterator.isOn() 
		{		
			anAttribute := attributeIterator.item().oclAsType (!poseidon_uml_model::Core::Attribute!);
			Attribute_Process (anAttribute);
			attributeIterator.next();
		}
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	Attribute_Process (theAttribute : poseidon_uml_model::Core::Attribute)
	{
		theClass : poseidon_uml_model::Core::Class;

		'ProcessAttribute BEGIN'.toOut();
//		logger.appendText('ProcessAttribute BEGIN\n');
		
		
		logger.appendText('Processing attribute: ');
		logger.appendText(theAttribute.name.oclAsType(!Standard::String!));
		logger.appendText('...\n');
		
        // we have to deal only with public attributes
		if theAttribute.visibility.[=](!poseidon_uml_model::Data_Types::VisibilityKind!.vk_public)
		{
			// we retrieve the class of the attribute
			theClass := theAttribute.owner;
		
			// we make the attribute private
			Attribute_Privatize (theClass, theAttribute);

			// we add a getter
			Attribute_AddGetter (theClass, theAttribute);
			
		}
		else 
		{
			logger.appendText('Attribute not public\n');
		}
		
		logger.appendText('ProcessAttribute END\n');
		'ProcessAttribute END'.toOut();
	}


	////////////////////////////////////////////////////////////////////////////////////
	Attribute_Privatize (theClass     : poseidon_uml_model::Core::Class ;
					     theAttribute : poseidon_uml_model::Core::Attribute)
	{
		theAttribute.visibility := !poseidon_uml_model::Data_Types::VisibilityKind!.vk_private;
	}


	////////////////////////////////////////////////////////////////////////////////////
	Attribute_AddGetter(ownerClass   : poseidon_uml_model::Core::Class ;
					    theAttribute : poseidon_uml_model::Core::Attribute) : poseidon_uml_model::Core::Operation
	{
		getOperation    : poseidon_uml_model::Core::Operation;
        getMethod       : poseidon_uml_model::Core::Method;
        returnParameter : poseidon_uml_model::Core::Parameter;

        // we create the get operation
		getOperation := new poseidon_uml_model::Core::Operation ();		
		
		// we set the name of the get operation
		getOperation.name       := 'get_'.concat (theAttribute.name.oclAsType(!Standard::String!));
		getOperation.visibility := !poseidon_uml_model::Data_Types::VisibilityKind!.vk_public;

		// we create the get method
		getMethod               := new poseidon_uml_model::Core::Method();
		getMethod.visibility    := !poseidon_uml_model::Data_Types::VisibilityKind!.vk_public;
		getMethod.body          := new poseidon_uml_model::Data_Types::ProcedureExpression();
		getMethod.body.language := 'java';
		getMethod.body.body     := '// java comment'; 
		
		// we create the return parameter
		returnParameter      := new poseidon_uml_model::Core::Parameter();
		returnParameter.name := 'return';
		returnParameter.kind := !poseidon_uml_model::Data_Types::ParameterDirectionKind!.pdk_return;

		// we set the type of the return parameter
        associate ( 
        	type           := theAttribute.type : poseidon_uml_model::Core::Classifier,
        	typedParameter := returnParameter   : poseidon_uml_model::Core::Parameter
        );

		// we put the return parameter into the operation
        associate ( 
        	parameter         := returnParameter : poseidon_uml_model::Core::Parameter,
        	behavioralFeature := getOperation    : poseidon_uml_model::Core::BehavioralFeature
        );

		// we associate the method with the operation
        associate ( 
        	specification := getOperation : poseidon_uml_model::Core::Operation,
        	method        := getMethod    : poseidon_uml_model::Core::Method
        );

		// we put the get method into the classifier
        associate ( 
        	feature := getMethod  : poseidon_uml_model::Core::Feature, 
        	owner   := ownerClass : poseidon_uml_model::Core::Classifier
        );

		// we put the get operation into the classifier
        associate ( 
        	feature := getOperation : poseidon_uml_model::Core::Feature, 
        	owner   := ownerClass   : poseidon_uml_model::Core::Classifier
        );
        
        'before normalizeOperationOnClassGraphNodes call'.toOut();
        normalizeOperationOnClassGraphNodes(getOperation,ownerClass);
        
        return getOperation;
	}
	

	/* if the operation is not known by this Class GraphNode (in a diagram representing this class), then add it */
	normalizeOperationOnClassGraphNode( op : poseidon_uml_model::Core::Operation; 
										gn : poseidon_uml_model::Diagram_Interchange::GraphNode)
	{
		// TODO
		'normalizing Operation on GraphNode'.toOut();
		if not(umlDiQuery.isSemanticallyLinkedInGraphNodeTree(op, gn))
		{
			umlDiBuilder.addOperationGraphNodeOnClassGraphNode(op, gn);
			'Operation '.concat(op.name.oclAsType(!Standard::String!)).concat(' added on this ClassGraphNode').toOut();
		}
		else
		{
			'Operation\'s GraphNode allready in the Class GraphNode'.toOut();
		}
	}
	
	/* if the operation is not known by this Class GraphNodes (in diagrams representing this class), then add it */	
	normalizeOperationOnClassGraphNodes(op       : poseidon_uml_model::Core::Operation; 
										theClass : poseidon_uml_model::Core::Class)
	{
		foreach (gn : poseidon_uml_model::Diagram_Interchange::GraphNode) in ( umlDiQuery.retreiveClassGraphNodes(theClass))
		{			        
			normalizeOperationOnClassGraphNode(op, gn);
		}
	}
}


