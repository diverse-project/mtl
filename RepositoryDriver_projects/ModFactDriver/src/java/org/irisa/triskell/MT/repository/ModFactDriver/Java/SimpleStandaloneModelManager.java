/*
 * $Id: SimpleStandaloneModelManager.java,v 1.1 2004-10-25 13:57:13 dvojtise Exp $
 * Authors : ffondeme xblanc dvojtise
 * 
 * Copyright 2004 - INRIA - LGPL license
 */
package org.irisa.triskell.MT.repository.ModFactDriver.Java;

/*import javax.jmi.model.Classifier;
import javax.jmi.model.ClassifierClass;
import javax.jmi.model.EnumerationType;
import javax.jmi.model.MofClass;
import javax.jmi.reflect.*;*/
//import java.util.*;
import java.io.*;
//import java.lang.reflect.*;

/*import org.irisa.triskell.MT.DataTypes.Java.*;
import org.irisa.triskell.MT.DataTypes.Java.defaultImpl.*;
import org.irisa.triskell.MT.repository.API.Java.*;*/
import org.irisa.triskell.MT.repository.genericJMIDriver.*;
//import org.irisa.triskell.MT.repository.API.Java.API;
import org.irisa.triskell.MT.utils.Java.*;
/*import org.netbeans.api.mdr.CreationFailedException;*/
import org.apache.log4j.Logger;
/**
 * @author dvojtise 
 * @version $Revision: 1.1 $
 * 
 * This Model Manager is intended to be the start of a BasicMTL or MTL library
 * it does all the initialization stuffes needed by the ModFactdriver
 * it also provide a simple interface to manage ModFact models before sending them to the 
 * BasicMTL part as a library (API)
 * 
 * this class is needed in order to simplify the BasicMTL code 
 */
public class SimpleStandaloneModelManager {

	protected boolean isInitialized = false;
	protected static final org.apache.log4j.Logger log = Logger.getLogger("ModFactDriver");
	
	protected static final StringBuffer decompiler = new StringBuffer(); // store the batch command for decompiling
	/**
	 * @return org.apache.log4j.Logger
	 */
	public static org.apache.log4j.Logger getLog () {
			return SimpleStandaloneModelManager.log;
	}

	/**
	 * Initialize the Model Manager with all default values
	 * Eventually archive MDR generated byte code files and decompile them
	 */
	public SimpleStandaloneModelManager init() {
			
		LogConfigurationHelper.reconfigureLog4j(SimpleStandaloneModelManager.class.getName());					
		SimpleStandaloneModelManager.getLog().info("ModFact driver initialized...");
		isInitialized = true;	
		return this;
	}
	
	private static void saveHookForModel (final ModFactAPI api, final Model m) {
		Runtime.getRuntime().addShutdownHook(new Thread (new Runnable () {
			public void run () {
				try {
					m.store(api);
				} catch (Exception e) {
					getLog().error("Cannot save model " + m, e);
				}
				//	eventually decompile MDR generated bytecode
				try {
				 	if (decompiler.length() > 0) {
						 getLog().debug("Decompilling files.");
						 File decompilerBatch = File.createTempFile("MDRDecompilation", ".bat");
						 decompilerBatch.deleteOnExit();
						 BufferedOutputStream decompilerStream = new BufferedOutputStream(new FileOutputStream(decompilerBatch));
						 decompilerStream.write(decompiler.toString().getBytes());
					 /*/				Runtime.getRuntime().exec(decompilerBatch.getAbsolutePath());//*/
						 getLog().info("Please, run " + decompilerBatch.getAbsolutePath() + " manually to decompile files...");//*/
				 }
				} catch (Exception e) {
					getLog().error("Cannot decompile generated bytecode " + m, e);
				}
			}
		}));
	}
	
	/**	  
	 * getModel	Simply create an starts a new RepositoryModel for BasicMTL 
	 * 		this function gives access to the full MDRAPI syntax
	 * @param repository
	 * @param metamodel
	 * @param modelName
	 * @param model
	 * @return MDRAPI
	 * @throws java.lang.Exception
	 */
	public ModFactAPI getModel(
		String repository,
		org.irisa.triskell.MT.repository.genericJMIDriver.Metamodel metamodel,
		String modelName,
		org.irisa.triskell.MT.repository.genericJMIDriver.Model model)
		throws java.lang.Exception
	{
		if (! isInitialized) throw new Exception("Driver not correctly initialized");
		
		ModFactAPI api = new ModFactAPI(repository, metamodel, modelName, model);
		saveHookForModel(api, model);
		api.startup(null);
		return api;
	}
	
	/**
	 * Returns a metamodel described by a (MOF-based) XMI file.
	 * @param file
	 * @param metaPackageToInstanciate
	 * @return XmiMetamodel
	 */
	public XmiMetamodel getMdrXMIMetaModel (String file, String [] metaPackageToInstanciate) {
		return new XmiMetamodel(file, metaPackageToInstanciate);
	}
	
	/**
	 * Returns the mof metamodel.
	 * @return MofMetamodel
	 */
	public MofMetamodel getMdrMOFMetaModel () {
		return MofMetamodel.getTheInstance();
	}
	
	/**
	 * Returns a metamodel the have already been loaded as a model.
	 * @param metamodelPackageName
	 * @param metaPackageToInstanciate
	 * @return LoadedMetamodel
	 */
	public LoadedMetamodel getMdrLoadedMetamodel (String metamodelPackageName, String [] metaPackageToInstanciate) {
		return new LoadedMetamodel(metamodelPackageName, metaPackageToInstanciate);
	}
	
	/**
	 * Returns a metamodel that have already been loaded and implemented by another repository.
	 * WARNING: this will make the dependent model use an alredy existing MDR extend according to the model name;
	 * be sure this extent can accept the model you want. 
	 * @return ImplementedMetamodel
	 */
	public ImplementedMetamodel getMdrImplementedMetamodel () {
		return new ImplementedMetamodel();
	}
	
	/**
	 * Returns a model described by a XMI file (that should complies with the latter givem metamodel)
	 * and wich will be stored in another or the same XMI file (that will complies with the latter gven metamodel).
	 * If the loading file is null, the model will be empty;
	 * if the storing file is null, the model will not be saved.
	 * @param loadingFile
	 * @param storingFile
	 * @return XmiModel
	 */
	public XmiModel getMdrXMIModel (String loadingFile, String storingFile) {
		return new XmiModel(loadingFile, storingFile);
	}

	/**
	 * getModelFromXMI return a model from a XMI MM and a XMI model files
	 * 	this is a basic version 
	 * @param metamodelXmiFileName
	 * @param modelName
	 * @param modelXmiInputFileName
	 * @param modelXmiOuputFileName
	 * @return MDRAPI
	 * @throws java.lang.Exception
	 */
	public ModFactAPI getModelFromXMI(
		String metamodelXmiFileName,
		String modelName,
		String modelXmiInputFileName,
		String modelXmiOuputFileName)
		throws java.lang.Exception
	{
		
		if (! isInitialized) throw new Exception("Driver not correctly initialized");
		
		Model xmiModel = new XmiModel(modelXmiInputFileName, modelXmiOuputFileName);
		ModFactAPI api = new ModFactAPI(null, 
								new XmiMetamodel(metamodelXmiFileName),
								modelName, 
								xmiModel);
		saveHookForModel(api, xmiModel);
		api.startup(null);
		return api;
	}
	
	public ModFactAPI getModelFromXMI(
		String metamodelXmiFileName,
		String metaPackageToInstanciate,
		String modelName,
		String modelXmiInputFileName,
		String modelXmiOuputFileName)
		throws java.lang.Exception
	{
		
		if (! isInitialized) throw new Exception("Driver not correctly initialized");
		
		Model xmiModel = new XmiModel(modelXmiInputFileName, modelXmiOuputFileName);
		ModFactAPI api = new ModFactAPI(null, 
								new XmiMetamodel(metamodelXmiFileName, new String [] {metaPackageToInstanciate}),
								modelName, 
								xmiModel);
		saveHookForModel(api, xmiModel);
		api.startup(null);
		return api;
	}
	
	
	/**
	 * 	getModelfromGUI open a graphical user interface that allow the user to choose his model
	 * 
	 * @param userMessage indicates for which purpose the model will be used
	 * @return MDRAPI
	 * @throws java.lang.Exception
	 */
	public ModFactAPI getModelfromGUI(
			String userMessage)
			throws java.lang.Exception
	{
		if (! isInitialized) throw new Exception("Driver not correctly initialized");
		
		throw new Exception("Method Not Implemented");
		//return null;
	}

	// autotest
	public static void main (String [] args) {
		try {
			SimpleStandaloneModelManager aSimpleStandaloneModelManager = new SimpleStandaloneModelManager();		
			aSimpleStandaloneModelManager.init();
			System.exit(0);
		} catch (Exception x) {
			x.printStackTrace();
			System.exit(-1);
		}
	}
	
}
