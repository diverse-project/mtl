// -----------------------------------------------------------------------------
// $Id: MDRDriver.mtl,v 1.1 2004-10-13 14:24:37 jpthibau Exp $
//
// This native library is used to provide the specific functions needed to open, load, save models
// with the MDR repository


library MDRDriver;
// as native, it is not allowed to inherit from another lib
// Lib parameters :
// No parameter for this lib 

/**
  * this class hold the different initialization part of the driver and methods that enable to get 
  * a MDR RepositoryModel
  */
class MDRModelManager
tag mangle := specialtag [MDRDriver.MDRModelManager];
tag type := specialtag [MDRDriver.MDRModelManager.TheType];
tag DoNotGenerate := booleantag true;
{
	// allthis is only comments, the real definition is in the real java file
	// however here is the available methods of this class according to the mangle adopted for the 
	// different classes in this library
	/**
	  * initialize the driver so the driver could run properly
	  * Must be call for a correct behavior
	  */	  
	/* init() : MDRModelManager
	{
	}
	*/
	/**
	  * return a model (ie. equivalent to a library)
	  * needs a lot of parameters specific to this Repository
	  * this driver method is versy special as it return an object that conforms to a BasicMtl library
	  */
	/*getModel ( repository : Standard::String;
	           aMdrMetamodel : MdrMetamodel;
	           modelName : Standard::String;
	           aMdrModel : MdrModel ): RepositoryModel
	// syntax to map to a Java Native operation to be defined !! (something taht looks like eiffel ?
	// needs to define more precisely the mapping between the java side spec and the 
	// the special tag java replace the content of this method by this string which should return the correct type.
	// in this case it call a staic method of MDRAPI class	
	{
	}*/
	
	/**
	  * return a metamodel based an an xmi file
	  */
	/*getMdrXMIMetaModel (file : Standard::String, metaPackageToInstanciate : Standard::Sequence) : MdrMetaModel {}
	*/
	
	/**
	  * return the MOF metamodel
	  */
	/*getMdrMOFMetaModel () : MdrMetaModel {}
	*/
	
	/**
	  * return the MOF metamodel
	  */
	/*getMdrLoadedMetaModel (metamodelPackageName : Standard::String, metaPackageToInstanciate : Standard::Sequence) : MdrMetaModel {}
	*/
	
	/**
	 * Returns a metamodel that have already been loaded and implemented by another repository.
	 * WARNING: this will make the dependent model use an alredy existing MDR extend according to the model name;
	 * be sure this extent can accept the model you want. 
	 */
	/*getMdrImplementedMetaModel () : MdrMetaModel {}
	*/
	
	/**
	 * Returns a model described by a XMI file (that should complies with the latter givem metamodel)
	 * and wich will be stored in another or the same XMI file (that will complies with the latter gven metamodel).
	 * If the loading file is null, the model will be empty;
	 * if the storing file is null, the model will not be saved.
	 */
	/*getMdrXMIModel (loadingFile Standard::String, storingFile : Standard::String) : MdrModel {}
	*/
	
	/* one of the simpliest way to get started
	getModelFromXMI(
		metamodelXmiFileName, modelName, 
		modelXmiInputFileName, modelXmiOuputFileName : Standard::String ) : RepositoryModel
	{	
	}*/
	
	/* one of the simpliest way to get started, giving the root package
	getModelFromXMI(
		metamodelXmiFileName, metaPackageToInstanciate, modelName, 
		modelXmiInputFileName, modelXmiOuputFileName : Standard::String ) : RepositoryModel
	{	
	}*/
	/**
	 * serialize/store the model (usually on disk)
	 */
	storeModel( modelName : Standard::String)
	{
	}
	/**
	 * remove the reference to this model from the model manager
	 */
	disposeModel(modelName : Standard::String)
	{
	}
	/**
	  * Simpliest way to get started but need user manipulation
	  * open a GUI to ask the user which model he wants, the GUI may be very complex
	  * return a model (ie. equivalent to a library)
	  * the message is used to inform the user for which purpose this model will be used
	  * this driver method is versy special as it return an object that conforms to a BasicMtl library
	  */
	GUIGetModel(UserMessage : Standard::String) : RepositoryModel
	{
	}
}

//*************************************************************************
//   here are some classe used by the GetModel method of the ModelManager

/**
  *  a metamodel in the Mdr context (abstract)
  */
class MdrMetamodel
// maps to org.irisa.triskell.MT.repository.MDRDriver.Java.Metamodel, 
// and doesn't generate it as it will use the java version of it.
tag mangle := specialtag [org.irisa.triskell.MT.repository.MDRDriver.Java.Metamodel];
tag DoNotGenerate := booleantag true;
{	
	// look in the java file for description
}

/**
  *  model in the MDR context (abstract)
  */
class MdrModel
// maps to org.irisa.triskell.MT.repository.MDRDriver.Java.Model
tag mangle := specialtag [org.irisa.triskell.MT.repository.MDRDriver.Java.Model];
tag DoNotGenerate := booleantag true;
{
	// look in the java file for description
}
