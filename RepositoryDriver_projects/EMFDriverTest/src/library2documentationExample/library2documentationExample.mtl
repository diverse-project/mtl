library library2documentationExample;

//documentation model
model DocumentationMM : RepositoryModel;

/********************************************/
// Entry point operation : runTransformation
//
// the name of the entry point operation may
// be changed in modifying the runTransformation
// procedure call inside EMFTransformationLauncher project, SampleAction.java 
/********************************************/

runTransformation():Standard::Void
{
	/* *******************************
	This transformation changes the metamodel of Library
	in replacing names as follow :
	Library becomes Documentation Center;
	Book becomes Booklet;
	Writer becomes Author;
	Books categories are changed to booklets categories : science,philosophy,litterature;
	a new category is also added : history
	********************************** */
	
	modelManager : EMFDriver::EMFModelManager;
	set : Standard::Set;
	it : Standard::Iterator;
	aClass : DocumentationMM::EClass;
	anAssociationEnd : DocumentationMM::EReference;
	 aBookCategory : DocumentationMM::EEnumLiteral;
	
	modelManager := new EMFDriver::EMFModelManager();

	//create a true replica of the library MM into a new documentation MM
	//use loadModel ans saveAsXmiModel methods

	DocumentationMM := modelManager.loadModelFromXMI(
									'DocumentationMM',
									'ecore',
									'c:/ECLIPSEEMFDRIVER/eclipse/workspace/EMFDriverTest/InputModels/library.ecore');

	modelManager.saveModelAsXMI('DocumentationMM',
								'c:/ECLIPSEEMFDRIVER/eclipse/workspace/EMFDriverTest/OutputModels/documentation.ecore');
	
	//iterate on all classes to refactor their names
	'Update all class names...'.toOut();
	'*=======================*'.toOut();
	set := !DocumentationMM::EClass!.allInstances();
	it := set.getNewIterator();
	it.start();
	while it.isOn() {
		aClass := it.item();
		if 'Library'.[=](aClass.name) {
			aClass.name := 'Documentation Center';
		}
		if aClass.name.[=]('Book') {
			aClass.name := 'Booklet';
		}
		if aClass.name.[=]('Writer') {
			aClass.name := 'Author';
		}
		it.next();
	}

	//iterate on all roles to refactor their names
	'Update all roles names...'.toOut();
	'*=======================*'.toOut();
	set := !DocumentationMM::EReference!.allInstances();
	it := set.getNewIterator();
	it.start();
	while it.isOn() {
		anAssociationEnd := it.item();
		if anAssociationEnd.name.[=]('writers') {
			anAssociationEnd.name := 'authors';
		}
		if anAssociationEnd.name.[=]('books') {
			anAssociationEnd.name := 'booklets';
		}
		it.next();
	}

	//iterate on all book categories to refactor their names
	'Update all booklets categories...'.toOut();
	'*===============================*'.toOut();
	set := !DocumentationMM::EEnumLiteral!.allInstances();
	it := set.getNewIterator();
	it.start();
	while it.isOn() {
		aBookCategory := it.item();
		if aBookCategory.name.[=]('ScienceFiction') {
			aBookCategory.name := 'Science';
		}
		if aBookCategory.name.[=]('Mystery') {
			aBookCategory.name := 'Philosophy';
		}
		if aBookCategory.name.[=]('Biography') {
			aBookCategory.name := 'Literature';
		}
		it.next();
	}
	//add the 'history' category
	aBookCategory := new DocumentationMM::EEnumLiteral();
	aBookCategory.name := 'History';
	aBookCategory.value := 3;

	//save the created documentation ecore model
	modelManager.saveModelToXMI('DocumentationMM');
	
	'Done.'.toOut();
	
	//clean the modelManager so that it may call other transformations without any model under management;
	// use the disposeModel method that frees loaded models
	modelManager.disposeModel('DocumentationMM');
}
