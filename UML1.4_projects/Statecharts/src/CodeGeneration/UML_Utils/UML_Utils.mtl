/******************************************************************************
 * $Id: UML_Utils.mtl,v 1.1 2004-10-06 09:34:25 fchauvel Exp $
 * This library provides tools function to manipulate objects of UML1.4 metamodel
 * It is inspired by some usefull Objecteering J method for some metaclasses.
 * It should avoid to have some repetitive MTL code. 
 * Syntax used : BasicMTL V1.9 syntax cf. basicmtlParser.mtl V1.9
 *
 ******************************************************************************/

library UML_Utils;


model UML : RepositoryModel;		// should be a UML1.4 MetaModel


/******************************************************************************
 * category : 
 * name     : init
 * purpose  : Initialization of the library. A metamodel of UML1.4 has to be given
 * in       : aModel : a UML1.4 metamodel
 * out      : the library itself
 * remark   : 
 ******************************************************************************/
	
	init (aModel : RepositoryModel) : UML_Utils
	{
		// we must have a reference to the UML metamodel and keep it
		UML := aModel;
		
		return self;
	}
	
	
	aie ()
	{
	
	}
	
	
	getTypeAsClassifier(type : Standard::String) : UML::Core::Classifier
	{
		result		:	UML::Core::Classifier;
		found		:	Standard::Boolean;
		iterator	:	Standard::Iterator;
		aType		:	UML::Core::DataType;
		
		found := false;
		iterator := !UML::Core::DataType!.allInstances().getNewIterator();
		iterator.start();
		while iterator.isOn().and(found.not()) {	
			aType := iterator.item().oclAsType(!UML::Core::DataType!);
			if ( aType.name.[=](type) ){
				result := aType;
				found := true;
				'!!!!!!!!!! GOOD : Type found !!!!!!!!!!! '.toOut();
				aType.name.oclAsType(!Standard::String!).toOut();
			}
			iterator.next();
		}
		
		if ( found.not() )  {
			'!!!!!!!!! BAD : Type not Found !!!!!!!!!!! '.toOut();
			result := new UML::Core::DataType();
			result.name := type;	
		}
		return result;
	}
	
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : 
	// name     : 
	// purpose  : 
	// in       : 
	//          : 
	// out      : 
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	createAndAddClass (
		name  : Standard::String;
		owner : UML::Core::Namespace
	) : UML::Core::Class
	{
		result : UML::Core::Class;
		
		result := new UML::Core::Class ();
		
		result.name := name;
	
		associate (
			namespace    := owner   : UML::Core::Namespace,
			ownedElement := result	: UML::Core::ModelElement
		);
		
		return result;
	}
	
	
	createMultiplicity(
		lower 	:	Standard::Integer;
		upper	:	Standard::Integer
	)	:	UML::Data_Types::Multiplicity
	{
		result	:	UML::Data_Types::Multiplicity;
		range	:	UML::Data_Types::MultiplicityRange;
		
		
		result := new UML::Data_Types::Multiplicity();
		range := new UML::Data_Types::MultiplicityRange();
		range.[lower] := lower;
		range.[upper] := upper;
		
		associate( 	
			[multiplicity] := result : UML::Data_Types::Multiplicity,
			[range]	:= range : UML::Data_Types::MultiplicityRange
		);	
		
		return result;	
	}
	
	
	createAssociationEnd
	(
		theParticipant		:	UML::Core::Classifier;
		roleName			:	Standard::String;
		isNavigable			:	Standard::Boolean;
		multiplicity		:	UML::Data_Types::Multiplicity
	)	: 	UML::Core::AssociationEnd
	{
		resultEnd	:	UML::Core::AssociationEnd;
		
		resultEnd := new UML::Core::AssociationEnd();
	
		resultEnd.name 			:= roleName;
		resultEnd.isNavigable 	:= isNavigable;
		resultEnd.ordering		:= !UML::Data_Types::OrderingKind!.ok_unordered;
		resultEnd.[aggregation] := !UML::Data_Types::AggregationKind!.ak_none;
		resultEnd.targetScope 	:= !UML::Data_Types::ScopeKind!.sk_instance;
		resultEnd.multiplicity	:= multiplicity;
		resultEnd.changeability	:= !UML::Data_Types::ChangeableKind!.ck_changeable;
		resultEnd.visibility	:= !UML::Data_Types::VisibilityKind!.vk_public;
	
	
		associate ( 	
			[participant] := theParticipant : UML::Core::Classifier,
	 		[association] := resultEnd : UML::Core::AssociationEnd 
	 	);
		
		return resultEnd;
	
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : 
	// name     : createAndAddAssociationBetween
	// purpose  : Create an association between two classifers and add it two a namespace
	// in       : name, the name of the association
	//          : owner, the model element which contains the association
	//			: elementA, the first classifier linked by the association
	// out      : the association
	// remark   : 
	// author	: Franck Chauvel
	////////////////////////////////////////////////////////////////////////////////////
	createAndAddAssociationBetween(
		name			:	Standard::String;
		owner			:	UML::Core::Namespace;
		element_A		: 	UML::Core::AssociationEnd;
		element_B		:	UML::Core::AssociationEnd
	)	:	UML::Core::Association 
	{
		result 			: 	UML::Core::Association;  
		
		result := new UML::Core::Association();
		result.name := name;
		
		associate (
			[namespace]    := owner   : UML::Core::Namespace,
			[ownedElement] := result	: UML::Core::ModelElement
		);
		
		// Build the links between the new Association and the two associationEnds
		associate( 	connection := element_A : UML::Core::AssociationEnd,
		 			[association] := result : UML::Core::Association );
		 			
		associate( 	connection := element_B : UML::Core::AssociationEnd,
	 				[association] := result : UML::Core::Association );
		
		return result;	
	}
	
	
	
	createAndAddInheritanceBetween(
		owner		:	UML::Core::Namespace;
		child		:	UML::Core::GeneralizableElement;
		parent		:	UML::Core::GeneralizableElement
	) : UML::Core::Generalization
	{
		resultLink		:	UML::Core::Generalization;
		
		resultLink := new UML::Core::Generalization();
		
		associate(
			[specialization] := resultLink : UML::Core::Generalization,
			[parent] := parent : UML::Core::GeneralizableElement
		);
		
		associate(
			[generalization] := resultLink	: UML::Core::Generalization,
			[child] := child : UML::Core::GeneralizableElement
		);
		
		return resultLink;
	}
	
	
	
	copyAllOperationsInto(
		source	:	UML::Core::Classifier;
		target	:	UML::Core::Classifier
	){
		featureIterator		:	Standard::Iterator;
		aFeature			:	UML::Core::Feature;
		
		featureIterator := source.feature.getNewIterator();
		featureIterator.start();
		while featureIterator.isOn() {
			aFeature := featureIterator.item().oclAsType(!UML::Core::Feature!);
			if ( aFeature.oclIsTypeOf(!UML::Core::Operation!) ) {
				copyOperationInto(
					featureIterator.item().oclAsType(!UML::Core::Operation!),
					target	
				);
			}
			featureIterator.next();
		}
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : 
	// name     : CopyOperationInto
	// purpose  : Copy an operation from a classifier to an other 
	// in       : operation : the operation we want to copy
	//          : target : the target classifier
	// remark   : 
	// author	: Franck Chauvel
	////////////////////////////////////////////////////////////////////////////////////
	
	copyOperationInto(
		operation	:	UML::Core::Operation;
		target		:	UML::Core::Classifier
	){
		theOperationCopy	:	UML::Core::Operation;
		aMethod				:	UML::Core::Method;
		aCopyMethod			:	UML::Core::Method;
		methodIterator		: 	Standard::Iterator;
				
		// Create a copy of the operation
		theOperationCopy := createAndAddOperation(operation.name.oclAsType(!Standard::String!), target);
		theOperationCopy.visibility := operation.visibility;
		theOperationCopy.concurrency := operation.concurrency;
		theOperationCopy.isQuery := operation.isQuery;
		theOperationCopy.isRoot := operation.isRoot;
		theOperationCopy.isLeaf := operation.isLeaf;
		theOperationCopy.isAbstract := operation.isAbstract;
		theOperationCopy.specification := operation.specification;
			
		// Create a copy for each method
		methodIterator := getMethodSetFromOperation(operation).getNewIterator();
		methodIterator.start();
		while methodIterator.isOn() {
			aMethod := methodIterator.item().oclAsType(!UML::Core::Method!);
			aCopyMethod := createAndLinkMethod(	aMethod.body.language.oclAsType(!Standard::String!), 
												aMethod.body.body.oclAsType(!Standard::String!), 
												theOperationCopy);
			aCopyMethod.isQuery := aMethod.isQuery;		
			methodIterator.next();
		}
		
	}
	
	
	
	getMethodSetFromOperation(
		operation 	:	UML::Core::Operation
	) : Standard::Set 
	{ 	
		result			: 	Standard::Set;
		aMethod			: 	UML::Core::Method;
		methodIterator	:	Standard::Iterator;
	
		result := new Standard::Set();	
		methodIterator := !UML::Core::Method!.allInstances().getNewIterator();
		methodIterator.start();
		while methodIterator.isOn() {
			aMethod := methodIterator.item();
			if ( aMethod.specification.[=](operation) ) {
				result := result.including(aMethod);
			}  
			methodIterator.next();
		}
		
		return result;
	}
	
	
	createAndAddAttribute
	(	
		name		:	Standard::String;
		dataType	:	UML::Core::Classifier;
		owner		:	UML::Core::Classifier
	) : UML::Core::StructuralFeature
	{
		result	:	UML::Core::Attribute;
		
		// Initialization
		result := new UML::Core::Attribute();
		result.visibility := !UML::Data_Types::VisibilityKind!.vk_private;
		result.multiplicity := createMultiplicity(1,1);
		result.changeability := !UML::Data_Types::ChangeableKind!.ck_changeable ;
		result.targetScope := !UML::Data_Types::ScopeKind!.sk_instance ;
		// Need to initialize initialValue attribute
		
		// Creating the type association 
		associate(
			[type] := dataType : UML::Core::Classifier,
			[typedFeatured] := result : UML::StructuralFeature
		);
		
		// Associate the attribute to is container
		associate(
			[feature] := result : UML::Core::Feature,
			[owner] := owner : UML::Core::Classifier
		); 
		
		return result;
	}
		
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Operation
	// name     : createAndAddOperation
	// purpose  : create a new Operation instance and add it to a classifier
	// in       : name  : the name of the Operation instance
	//          : owner : the classifier of the Operation instance to be created
	// out      : a new Operation instance
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	createAndAddOperation (
		name  : Standard::String; 
		owner : UML::Core::Classifier
	) : UML::Core::Operation
	{
		newOperation : UML::Core::Operation;
	
		// we create the new operation
		newOperation := new UML::Core::Operation ();
	
		// we set the name of the operation			
		newOperation.name := name;
		newOperation.visibility := !UML::Data_Types::VisibilityKind!.vk_public;
		// we add the operation to the classifier
		addFeatureToClassifier (newOperation, owner);
		
		// we return the result
		return newOperation;
	}
	
			
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Method
	// name     : createMethod
	// purpose  : create a new Method
	// in       : theLanguage : the language associated to the Method instance to be created
	//          : theBody     : the code associated to the Method instance to be created
	// out      : a new Method instance
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	createMethod (
		theLanguage  : Standard::String;
		theBody      : Standard::String
	) : UML::Core::Method
	{
		newMethod : UML::Core::Method;
	
		newMethod               := new UML::Core::Method();
		newMethod.body          := new UML::Data_Types::ProcedureExpression();
		newMethod.body.body     := theBody;
		newMethod.body.language := theLanguage;		
			
		return newMethod;
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Method
	// name     : createAndLinkMethod
	// purpose  : create a new Method and link it to a specification
	// in       : theLanguage   : the language associated to the Method instance to be created
	//          : theBody       : the code associated to the Method instance to be created
	//          : specification : an Operation instance as the specification
	// out      : a new Method instance
	// remark   : the created Method instance is added to the same classifier as the specification 
	////////////////////////////////////////////////////////////////////////////////////
	createAndLinkMethod (
		theLanguage   : Standard::String;
		theBody       : Standard::String;
		specification : UML::Core::Operation
		
	) : UML::Core::Method
	{
		newMethod : UML::Core::Method;
		owner     : UML::Core::Classifier;
	
		// we create a new method
		newMethod := createMethod (theLanguage, theBody);
		
		// we retrieve the owner of the specification
		owner := specification.owner;
		
		// we add the method to the classifier
		addFeatureToClassifier (newMethod, owner);
		
		// we associate the method with the operation
		associate ( 
			specification := specification : UML::Core::Operation,
			method        := newMethod     : UML::Core::Method
		);
			
		// we return the result
		return newMethod;
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Feature
	// name     : addFeatureToClassifier
	// purpose  : add a feature into a classifier
	// in       : theFeature    : the feature
	//          : theClassifier : the classifier  
	// out      : 
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	addFeatureToClassifier (
		theFeature    : UML::Core::Feature;
		theClassifier : UML::Core::Classifier
	)
	{
		// we put the feature into the classifier
		associate ( 
			feature := theFeature    : UML::Core::Feature, 
			owner   := theClassifier : UML::Core::Classifier
		);
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Parameter
	// name     : createAndAddTypedReturnParameter
	// purpose  : create a return parameter and add it to a behavioral feature
	// in       : type  : the type of the Parameter instance to be created
	//          : owned : the BehavioralFeature to put the parameter into
	// out      : a new Parameter instance
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	createAndAddTypedReturnParameter (
		type  : UML::Core::Classifier;
		owner : UML::Core::BehavioralFeature
	) : UML::Core::Parameter
	{
		returnParameter : UML::Core::Parameter;
	
		// we create a new typed parameter
		returnParameter      := new UML::Core::Parameter();
		returnParameter.kind := !UML::Data_Types::ParameterDirectionKind!.pdk_return;
	
		// we set the type of the return parameter
		associate ( 
			type           := type              : UML::Core::Classifier,
			typedParameter := returnParameter   : UML::Core::Parameter
		);
		
		// we add it to the owner
		returnParameter.toOut();
		owner.toOut();
		addParameterToBehavioralFeature (returnParameter, owner);
		
		// we return the result
		return returnParameter;
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Parameter
	// name     : createAndAddTypedParameter
	// purpose  : create a 'in' parameter and add it to a behavioral feature
	// in       : name  : name of the Parameter instance to be created
	//          : type  : the type of the Parameter instance to be created
	//          : owned : the BehavioralFeature to put the parameter into
	// out      : a new Parameter instance
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	createAndAddTypedParameter (
		name  : Standard::String;
		type  : UML::Core::Classifier;
		owner : UML::Core::BehavioralFeature
	) : UML::Core::Parameter
	{
		newParameter : UML::Core::Parameter;
	
		// we create a new typed parameter
		newParameter      := new UML::Core::Parameter();
		newParameter.name := name;
		newParameter.kind := !UML::Data_Types::ParameterDirectionKind!.pdk_in;
	
		// we set the type of the return parameter
		associate ( 
			type           := type         : UML::Core::Classifier,
			typedParameter := newParameter : UML::Core::Parameter
		);
		
		// we add it to the owner
		addParameterToBehavioralFeature (newParameter, owner);
		
		// we return the result
		return newParameter;
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::Parameter, UML::Core::BehavioralFeature
	// name     : addParameterToBehavioralFeature
	// purpose  : add a parameter into a behavioral feature
	// in       : aParameter         : the parameter
	//          : aBehavioralFeature : the behavioral feature
	// out      :
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	addParameterToBehavioralFeature (
		aParameter         : UML::Core::Parameter;
		aBehavioralFeature : UML::Core::BehavioralFeature
	)
	{
		// we put the return parameter into the operation
		associate ( 
			parameter         := aParameter         : UML::Core::Parameter,
			behavioralFeature := aBehavioralFeature : UML::Core::BehavioralFeature
		);
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// category : UML::Core::ModelElement
	// name     : IsModelElementTaggedValue
	// purpose  : Tells if a model element has a given tagged value (given as a string)
	// in       :
	// out      :
	// remark   : 
	////////////////////////////////////////////////////////////////////////////////////
	
	DisplayModelElementTaggedValue (
		elt : UML::Core::ModelElement
	) 
	{
		result   : Standard::Boolean;
		iterator : Standard::Iterator;
		tg       : UML::Core::TaggedValue;
		tgval    : Standard::String;
		itValue  : Standard::Iterator;
		
		result := false;
	
		iterator := elt.taggedValue.getNewIterator();
		iterator.start();
		while result.[=](false).[and] (iterator.isOn()) 
		{		
			tg := iterator.item().oclAsType(!UML::Core::TaggedValue!);
	
			itValue := tg.dataValue.getNewIterator ();
			itValue.start();
			while result.[=](false).[and] (itValue.isOn())
			{
				tgval := itValue.item().oclAsType(!Standard::String!);
				'    > '.concat (tgval);
				itValue.next();
			}
			iterator.next();
		}
	}
	
	
	getNamespaceOfElement( elt : UML::Core::ModelElement) : UML::Core::ModelElement
	{
		result : UML::Core::Namespace;
		
		result := getFirstElement(elt.namespace.oclAsType(!Standard::Set!)).oclAsType(!UML::Core::ModelElement!);
		return result;
	}
	
		
	/*
	 * Purpose	:	Return a set containing all statemachine associated with the element
	 */
	getAllBehaviorsOfElement(element : UML::Core::ModelElement) : Standard::Set
	{
		resultSet	:	Standard::Set;
		
		resultSet := new Standard::Set();
		
		foreach (aStateMachine : UML::State_Machines::StateMachine) where ( aStateMachine.context.[=](element)){
			resultSet := resultSet.including(aStateMachine);
		}		
		
		return resultSet;
	}
	
	
	hasOneBehavior(aClass : UML::Core::Class) : Standard::Boolean 
	{
		aSet 	: 	Standard::Set;
		result 	:	Standard::Boolean; 
		
		aSet := getAllBehaviorsOfElement(aClass.oclAsType(!UML::Core::ModelElement!));
		if ( isNull(aSet) ){ result := false;  }
		else { result := aSet.size().[>](0); }
	
		return result;
	}
	
	
	
	/* 
	 * return all signal declared by a Class
	 */
	getAllSignalsOf(element : UML::Core::ModelElement) : Standard::Set
	{
		resultSet				:	Standard::Set;
		signalIterator			:	Standard::Iterator;
		aSignal					:	UML::State_Machines::Event;
		
		resultSet := new Standard::Set();
		signalIterator := !UML::State_Machines::Event!.allInstances.getNewIterator();
		signalIterator.start();
		while signalIterator.isOn() {
			aSignal := signalIterator.item().oclAsType(!UML::State_Machines::Event!);
			if ( aSignal.namespace.[=](element) ){
				resultSet := resultSet.including(aSignal);
			}
			signalIterator.next();
		}
		
		return resultSet;
	}
	
	
		
		
	getFirstElement(aSet : Standard::Set) : Standard::OclAny
	{
		result		:	Standard::OclAny;	
		iterator	:	Standard::Iterator;
		
		iterator := aSet.getNewIterator();
		iterator.start();
		if iterator.isOn() {
			result := iterator.item();
		}
		
		return result;
	}
	
	