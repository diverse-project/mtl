/*
 * Library 	: SCCodeGeneration 
 *		Code generation from UML StateCharts with semantic variation points 
 *		and different implantation choice
 *
 * File 	: $RCSfile: EventEnumeration.mtl,v $
 * Purpose 	: Define the Event Manager
 *
 * Authors	: Franck Chauvel
 * Created	: 10/05/2004
 * Version	: $Revision: 1.1 $
 * 
 * $Log: not supported by cvs2svn $
 * Revision 1.1  2004/09/03 12:03:02  dvojtise
 * initial revision
 * directly from Franck Chauvel work at the end of his DEA
 *
 *
 */
 
 
library SCCodeGeneration;


class EventEnumeration extends EventManager 
{

	enumeration	 :  UML::Core::Class;
	

	/*
	 * See : STL::Transformation
	 */
	run(){
				
		// We create a new class for representing the Event Enumeration
		enumeration := uml.createAndAddClass( 'EventEnumeration', this.theDirector.getTargetClass() );
		
		// We get all signals used by the target class and we add an attribute for each one
		foreach (aSignal : UML::State_Machines::Event) in ( uml.getAllSignalsOf( this.theDirector.getTargetClass() ))
		{			
			uml.createAndAddAttribute ( aSignal.name.oclAsType(!Standard::String!), enumeration, this.theDirector.getTargetClass() );
		}
		
	}		

}