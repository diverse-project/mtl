/*
 * Library 	: SCCodeGeneration 
 *		Code generation from UML StateCharts with semantic variation points 
 *		and different implantation choice
 *
 * File 	: $RCSfile: StateReification.mtl,v $
 * Purpose 	: Define an state manager for state reification (pattern state).
 *
 * Authors	: Franck Chauvel
 * Created	: 10/05/2004
 * Version	: $Revision: 1.1 $
 * 
 * $Log: not supported by cvs2svn $
 * Revision 1.1  2004/09/03 12:03:03  dvojtise
 * initial revision
 * directly from Franck Chauvel work at the end of his DEA
 *
 *
 */
 
 
library SCCodeGeneration;


class StateReification extends StateManager
{

	abstractState	:	UML::Core::Class;
	
	
	run()
	{	
	
		owner	:	UML::Core::ModelElement;
		asm		:	UML::State_Machines::StateMachine;
		
		// Create a new Class for abstract state
		owner := uml.getNamespaceOfElement(this.theDirector.getTargetClass().oclAsType(!UML::ModelElement!));
		abstractState := uml.createAndAddClass('AbstractState', owner);
				
		// Create a sub class for each sub state
		asm := uml.getFirstElement(uml.getAllBehaviorsOfElement(this.theDirector.getTargetClass())).oclAsType(!UML::State_Machines::StateMachine!);
		generateState(asm.top.oclAsType(!UML::State_Machines::State!));		
		
		// Create a new Attribute representing the current state
		uml.createAndAddAttribute ('currentState', abstractState, this.theDirector.getTargetClass());
	
	}
	
	
	
	/* 
	 * Purpose 	: 	Build the right structure for representing a state.
	 * Remark 	:	Should not be call directly 	
	 */ 
	generateState ( theState 	: 	UML::State_Machines::State ) : UML::Core::Class 
	{
		owner			:	UML::Core::ModelElement;
		stateName 		:	Standard::String;
		stateClass		:	UML::Core::Class;
		aSubStateClass	:	UML::Core::Class;
		childEnd		:	UML::Core::AssociationEnd;
		superEnd		:	UML::Core::AssociationEnd;
	
		'<< Code Generation >> Processing state '.concat(theState.name.oclAsType(!Standard::String!)).toOut();
	
		owner := uml.getNamespaceOfElement(this.theDirector.getTargetClass().oclAsType(!UML::ModelElement!));
		
		// We create a class for the state
		stateName := theState.name.concat('State');
		stateClass := uml.createAndAddClass(stateName, owner);
	
		if ( theState.oclIsTypeOf(!UML::State_Machines::CompositeState!) ){
			// Recursive call on each sub state
			foreach (aSubState : UML::State_Machines::State) in (theState.oclAsType(!UML::State_Machines::CompositeState!).subvertex)
			{
				aSubStateClass := generateState(aSubState.oclAsType(!UML::State_Machines::State!));
				
				if (theState.oclAsType(!UML::State_Machines::CompositeState!).isConcurrent){
					// We associate the sub class with the class with an inheritance link
					aSubStateClass.isAbstract := 'true';
					uml.createAndAddInheritanceBetween(owner, aSubStateClass, stateClass);
					
				} else {
					// We associate the sub class with the class with an aggregation link
					childEnd := uml.createAssociationEnd(aSubStateClass, aSubState.name.oclAsType(!Standard::String!), true, uml.createMultiplicity(1,1));
					superEnd := uml.createAssociationEnd(stateClass, 'context', true, uml.createMultiplicity(1,1));
					uml.createAndAddAssociationBetween('untilted', owner, childEnd, superEnd);					
		
				}
			}
		}
	
		return stateClass;
	}

}