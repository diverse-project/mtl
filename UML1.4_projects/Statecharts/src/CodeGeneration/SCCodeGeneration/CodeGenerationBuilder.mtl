/*
 * Library 	: SCCodeGeneration 
 *		Code generation from UML StateCharts with semantic variation points
 *		and different implantation choice
 *
 * File 	: $RCSfile: CodeGenerationBuilder.mtl,v $
 * Purpose 	: Define an state manager for state reification (pattern state).
 *
 * Authors	: Franck Chauvel
 * Created	: 10/05/2004
 * Version	: $Revision: 1.1 $
 * 
 * $Log: not supported by cvs2svn $
 * Revision 1.1  2004/09/03 12:03:02  dvojtise
 * initial revision
 * directly from Franck Chauvel work at the end of his DEA
 *
 *
 */
 
 
library SCCodeGeneration;



model UML	:	RepositoryModel;
model uml	:	UML_Utils;



class CodeGenerationBuilder
{

	stateMachine 	:	UML::State_Machines::StateMachine;
	result			:	CodeGeneration;
	theSemantic		:	SCSView::StatechartsSemantic;
	
	
	initLib(theModel : RepositoryModel)
	{
		UML := theModel;
		uml := new UML_Utils();
		uml.init(theModel);
	}
	  
	
	init(
		asm			:	UML::State_Machines::StateMachine;
		semantic 	:	SCSView::StatechartsSemantic
	){
		stateMachine := asm;
		theSemantic := semantic;
		
		result := new CodeGeneration();
		result.init();
	}
	
		
	visitStateMachine()
	{
		iterator 		: 	Standard::Iterator;
		tg       		: 	UML::Core::TaggedValue;
		tgval    		: 	Standard::String;
		itValue 	 	: 	Standard::Iterator;
		theName  		: 	Standard::String;
		theValue 		: 	Standard::String;
		eventManager	:	EventManager;
		stateManager	:	StateManager;
		
		
		'vive la révolution'.toOut();

		
		foreach (tgv : UML::Core::TaggedValue) in ( stateMachine.taggedValue ) 
		{
			iterator := tgv.dataValue.getNewIterator();
			
			if ( not isNull(tgv.type) ){
				
				theName := tgv.type.tagType.oclAsType(!Standard::String!);
								
				while (iterator.isOn())
				{
					theValue := iterator.item().oclAsType(!Standard::String!);
					iterator.next();
				}
			}
			
			if (theName = 'stateImplantation' ){
				if ( theValue = 'reification\\Objing') {
					' -+-> Option : State Implantation : Reification selected'.toOut();									
					stateManager := new StateReification();
					stateManager.init(result);
				} else {
					' -+-> Option : State Implantation : Enumeration selected'.toOut();									
				}
					
			} elseif (theName = 'eventImplantation') {
				if ( theValue = 'reification\\Objing') {
					' -+-> Option : Event Implantation : Reification selected'.toOut();									
					stateManager := new EventReification();
					stateManager.init(result);
				} else {
					' -+-> Option : Event Implantation : Enumeration selected'.toOut();									
				}
				
			} 
			
		}
	}
	
	getResult() : CodeGeneration
	{
		return result;
	}
		
}

