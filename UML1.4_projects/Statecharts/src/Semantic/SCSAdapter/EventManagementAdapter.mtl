/*
 * Library 	: SCSAdapter
 *		Define an default implementation of the SCSView library
 *
 * File 	: $RCSfile: EventManagementAdapter.mtl,v $
 * Purpose 	: Define an adapter of the eventSelection Object
 *
 * Authors	: Franck Chauvel
 * Created	: 12/03/2004
 * Version	: $Revision: 1.1 $
 * 
 * $Log: not supported by cvs2svn $
 * Revision 1.1  2004/09/03 12:03:56  dvojtise
 * initial revision
 * directly from Franck Chauvel work at the end of his DEA
 *
 *
 */
 

library SCSAdapter extends SCSView;


class EventManagementAdapter extends EventManagement refines EventManagement
{

	// Some attributes
	theRef 		: 	SCS::EventManagement;
	theFactory	:	AdapterFactory;
	
	
	/*
	 * Purpose 	: Build a new StatechartsSemantic Adapter
	 * Params 	:
	 * 		+ ref : the object that we want to adapt
	 *		+ factory : the adapter factory.
	 * Remark 	: should be call only by an AdapterFactory object
	 */
	init(
		ref		:	SCS::EventManagement ;
		factory : 	AdapterFactory	
	){
		theRef := ref;
		theFactory := factory;
	}


	/*
	 * See : SCSView::EventManagement::getAllEventSelection()
	 */
	getAllEventSelection() : Standard::Set
	{
		result	:	Standard::Set;
		
		result := new Standard::Set();
		
		
		foreach ( evtSel : SCS::EventSelection) in (theRef.eventSelection) 
		{
			result := result.including(theFactory.getViewOfEventSelection(evtSel));
		}
		
		return result;
	}


	/*
	 * See : SCSView::EventManagement::getAllConflictResolution()
	 */
	getAllEventChoice() : Standard::Set
	{
		result : Standard::Set;
		
		result := new Standard::Set();
		foreach ( cr : SCS::EventChoice ) in ( theRef.eventChoice )
		{
			result := result.including(theFactory.getViewOfEventChoice(cr));
		}
		
		return result;
	}	
	
	// !TODO! ad hoc setters

}