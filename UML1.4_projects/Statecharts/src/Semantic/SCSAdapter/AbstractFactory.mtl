/*
 * Library 	: SCSAdapter
 *		Define an default implementation of the SCSView library
 *
 * File 	: $RCSfile: AbstractFactory.mtl,v $
 * Purpose 	: Define an adapter of the conflict Resolution Object
 *
 * Authors	: Franck Chauvel
 * Created	: 12/03/2004
 * Version	: $Revision: 1.1 $
 * 
 * $Log: not supported by cvs2svn $
 * Revision 1.1  2004/09/03 12:03:57  dvojtise
 * initial revision
 * directly from Franck Chauvel work at the end of his DEA
 *
 *
 */
 
  
library SCSAdapter extends SCSView;


model SCS	:	RepositoryModel;


class AdapterFactory extends ViewFactory refines ViewFactory
{
	
	table	:	Standard::Hashtable;
	
					
	init(theModel : RepositoryModel)
	{
		SCS := theModel;
		table := new Standard::Hashtable();
	}
	
	/*
	 * See : SCSView::ViewFactory::getViewOfSemantics
	 */
	getViewOfSemantic() : SCSView::StatechartsSemantic
	{
		ite		:	Standard::Iterator;
		out		:	SCSView::StatechartsSemantic;
	
		ite := !SCS::StatechartsSemantic!.allInstances().getNewIterator();
		ite.start();
		if ( ite.isOn() ){
			out := getViewOfStatechartsSemantic(ite.item().oclAsType(!SCS::StatechartsSemantic!));
		} 
		
		return out.oclAsType(!StatechartsSemanticAdapter!);
	}
	
	/*
	 * See : SCSView::ViewFactory::getViewOfStatechartsSemantic()
	 */
	getViewOfStatechartsSemantic( scs	: SCS::StatechartsSementic	) : SCSView::StatechartsSemantic
	{
		out : StatechartsSemanticAdapter;
		

		if ( table.contains(scs) ) 
		{
			out := table.get(scs);
				
		} else {
			out := new StatechartsSemanticAdapter();
			out.init(scs, self);
			table.put(scs, out);
		} 
		
		return out.oclAsType(!StatechartsSemanticAdapter!);
	}
	
	
	/*
	 * See : SCSView::ViewFactory::getViewOfEventSelection()
	 */
	getViewOfEventManagement(emgt : SCS::EventManagement) : SCSView::EventManagement
	{
		out : EventManagementAdapter;

		if ( table.contains(out) )
		{
			out := table.get(emgt);
						
		} else {
			out := new EventManagementAdapter();
			out.init(emgt, this);
			table.put(emgt, out);
		}
	
		return out.oclAsType(!EventManagementAdapter!);
	}
	
	/*
	 * See : SCSView::ViewFactory::getViewOfTransitionManagement()
	 */
	getViewOfTransitionManagement(tmgt : SCS::TransitionManagement) : SCSView::TransitionManagement
	{
		out : TransitionManagementAdapter;
		
		if ( table.contains(tmgt) )
		{
			out := table.get(tmgt);		
			
		} else {
			out := new TransitionManagementAdapter();
			out.init(tmgt, this);
			table.put(tmgt, out);
			
		}
		
		return out.oclAsType(!TransitionManagementAdapter!);
	}

	
	/*
	 * See : SCSView::ViewFactory::getViewOfTimeManagement()
	 */
	getViewOfTimeManagement(tmgt : SCS::TimeManagement) : SCSView::TimeManagement
	{
		out : TimeManagementAdapter;
		
		if ( table.contains(tmgt) )
		{
			out := table.get(tmgt);
					
		} else {
			out := new TimeManagementAdapter();
			out.init(tmgt, this);
			table.put(tmgt, out);

		}
		
		return out.oclAsType(!TimeManagementAdapter!);
	
	}

	
	/*
	 * See : SCSView::ViewFactory::getViewOfEventSelection()
	 */
	getViewOfEventSelection(es : SCS::EventSelection) : SCSView::EventSelection
	{	
		out : EventSelectionAdapter;
		
		if ( table.contains(es) )
		{
			out := table.get(es);
		
		} else {
			out := new EventSelectionAdapter();
			out.init(es, this);
			table.put(es, out);
			
		}
		
		return out.oclAsType(!EventSelectionAdapter!);
	}

	
	/*
	 * See : SCSView::ViewFactory::getViewOfTransitionSelection()
	 */
	getViewOfTransitionSelection(ts : SCS::TransitionSelection) : SCSView::TransitionSelection
	{
		out : TransitionSelectionAdapter;

		if ( table.contains(ts) )
		{
			out := table.get(ts);		
			
		} else {
			out := new TransitionSelectionAdapter();
			out.init(ts, this);
			table.put(ts, out);
		}
		
		return out.oclAsType(!TransitionSelectionAdapter!);
		
	}	
	
	
	/*
	 * See : SCSView::ViewFactory::getViewOfConflictResolution()
	 */
	getViewOfEventChoice(cr : SCS::ConflictResolution) : SCSView::EventChoice
	{
		out : EventChoiceAdapter;

		if ( table.contains(cr) )
		{
			out := table.get(cr);
	
		} else {
			out := new EventChoiceAdapter();
			out.init(cr, this);
			table.put(cr, out);
		
		}
		
		return out.oclAsType(!EventChoiceAdapter!);
	}
	
	
	/*
	 * See : SCSView::ViewFactory::getViewOfConflictResolution()
	 */
	getViewOfTransitionChoice(cr : SCS::ConflictResolution) : SCSView::TransitionChoice
	{
		out : TransitionChoiceAdapter;

		if ( table.contains(cr) )
		{
			out := table.get(cr);
			
		} else {
			out := new TransitionChoiceAdapter();
			out.init(cr, this);
			table.put(cr, out);
			
		}
		
		return out.oclAsType(!TransitionChoiceAdapter!);
	}
	
	
}