// $ID$
// This library provides tools function to manipulate objects of UML1.4 metamodel
// It is inspired by some usefull Objecteering J method for some metaclasses.
// It should avoid to have some repetitive MTL code.

library UML_Utils;

model UML : RepositoryModel;		// should be a UML1.4 MetaModel


////////////////////////////////////////////////////////////////////////////////////
// category : 
// name     : init
// purpose  : Initialization of the library. A metamodel of UML1.4 has to be given
// in       : aModel : a UML1.4 metamodel
// out      : the library itself
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

init (aModel : RepositoryModel) : UML_Utils
{
	// we must have a reference to the UML metamodel and keep it
	UML := aModel;
	
	return self;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Model_Management::Model
// name     : getModel
// purpose  : get the Model instance
// in       : 
// out      : the Model instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

getModel () : UML::Model_Management::Model
{
	aModel        : UML::Model_Management::Model;
	modelIterator : Standard::Iterator;
	
	modelIterator := !UML::Model_Management::Model!.allInstances().getNewIterator();
	modelIterator.start();
	aModel := modelIterator.item().oclAsType (!UML::Model_Management::Model!);

	// we return the result
	return aModel;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Model_Management::Package
// name     : createPackage
// purpose  : create a new Package instance 
// in       : name  : the name of the Package instance
// out      : a new Package instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createPackage (name : Standard::String) : UML::Model_Management::Package
{
	result : UML::Model_Management::Package;

	// we create the new operation
	result := new UML::Model_Management::Package ();

	// we set the name of the operation			
	result.name := name;

	// we return the result
	return result;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Class
// name     : createClass
// purpose  : create a new Class instance 
// in       : name  : the name of the Class instance
// out      : a new Class instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createClass (name : Standard::String) : UML::Core::Class
{
	result : UML::Core::Class;

	// we create the new operation
	result := new UML::Core::Class ();

	// we set the name of the operation			
	result.name := name;

	// we return the result
	return result;
}



////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Primitive
// name     : createPrimitive
// purpose  : create a new Primitive instance 
// in       : name  : the name of the Primitive instance
// out      : a new Primitive instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createPrimitive (name : Standard::String) : UML::Core::Primitive
{
	result : UML::Core::Primitive;

	// we create the new operation
	result := new UML::Core::Primitive ();

	// we set the name of the operation			
	result.name := name;

	// we return the result
	return result;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Operation
// name     : createOperation
// purpose  : create a new Operation instance 
// in       : name  : the name of the Operation instance
//          : visibility : the visibility of the operation
// out      : a new Operation instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createOperation (
	name       : Standard::String;
	visibility : UML::Data_Types::VisibilityKind
)
 : UML::Core::Operation
{
	newOperation : UML::Core::Operation;

	// we create the new operation
	newOperation := new UML::Core::Operation ();

	// we set the name of the operation			
	newOperation.name := name;
	
	// we set the visibility of the operation
	newOperation.visibility := visibility;
	
	// we return the result
	return newOperation;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Operation
// name     : createAndAddOperation
// purpose  : create a new Operation instance and add it to a classifier
// in       : name  : the name of the Operation instance
//          : visibility : the visibility of the operation
//          : owner : the classifier of the Operation instance to be created
// out      : a new Operation instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createAndAddOperation (
	name  : Standard::String; 
	visibility : UML::Data_Types::VisibilityKind;
	owner : UML::Core::Classifier
) : UML::Core::Operation
{
	newOperation : UML::Core::Operation;

	// we create the new operation
	newOperation := createOperation (name, visibility);
	
	// we add the operation to the classifier
	addFeatureToClassifier (newOperation, owner);
	
	// we return the result
	return newOperation;
}

		
////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Method
// name     : createMethod
// purpose  : create a new Method
// in       : theLanguage : the language associated to the Method instance to be created
//          : theBody     : the code associated to the Method instance to be created
// out      : a new Method instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createMethod (
	theLanguage  : Standard::String;
	theBody      : Standard::String
) : UML::Core::Method
{
	newMethod : UML::Core::Method;

	newMethod               := new UML::Core::Method();
	newMethod.body          := new UML::Data_Types::ProcedureExpression();
	newMethod.body.body     := theBody;
	newMethod.body.language := theLanguage;		
		
	return newMethod;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Method
// name     : createAndLinkMethod
// purpose  : create a new Method and link it to a specification
// in       : theLanguage   : the language associated to the Method instance to be created
//          : theBody       : the code associated to the Method instance to be created
//          : specification : an Operation instance as the specification
// out      : a new Method instance
// remark   : the created Method instance is added to the same classifier as the specification 
////////////////////////////////////////////////////////////////////////////////////

createAndLinkMethod (
	theLanguage   : Standard::String;
	theBody       : Standard::String;
	specification : UML::Core::Operation
	
) : UML::Core::Method
{
	newMethod : UML::Core::Method;
	owner     : UML::Core::Classifier;

	// we create a new method
	newMethod := createMethod (theLanguage, theBody);
	
	// we retrieve the owner of the specification
	owner := specification.owner;
	
	// we add the method to the classifier
	addFeatureToClassifier (newMethod, owner);
	
	// we associate the method with the operation
	associate ( 
		specification := specification : UML::Core::Operation,
		method        := newMethod     : UML::Core::Method
	);
		
	// we return the result
	return newMethod;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Parameter
// name     : createAndAddTypedReturnParameter
// purpose  : create a return parameter and add it to a behavioral feature
// in       : type  : the type of the Parameter instance to be created
//          : owned : the BehavioralFeature to put the parameter into
// out      : a new Parameter instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createAndAddTypedReturnParameter (
	type  : UML::Core::Classifier;
	owner : UML::Core::BehavioralFeature
) : UML::Core::Parameter
{
	returnParameter : UML::Core::Parameter;

	// we create a new typed parameter
	returnParameter      := new UML::Core::Parameter();
	returnParameter.kind := !UML::Data_Types::ParameterDirectionKind!.pdk_return;
	returnParameter.name := 'return';

	// we set the type of the return parameter
	associate ( 
		type           := type              : UML::Core::Classifier,
		typedParameter := returnParameter   : UML::Core::Parameter
	);
	
	// we add it to the owner
	addParameterToBehavioralFeature (returnParameter, owner);
	
	// we return the result
	return returnParameter;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Parameter
// name     : createAndAddTypedParameter
// purpose  : create a 'in' parameter and add it to a behavioral feature
// in       : name  : name of the Parameter instance to be created
//          : type  : the type of the Parameter instance to be created
//          : owned : the BehavioralFeature to put the parameter into
// out      : a new Parameter instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createAndAddTypedParameter (
	name  : Standard::String;
	type  : UML::Core::Classifier;
	owner : UML::Core::BehavioralFeature
) : UML::Core::Parameter
{
	newParameter : UML::Core::Parameter;

	// we create a new typed parameter
	newParameter      := new UML::Core::Parameter();
	newParameter.name := name;
	newParameter.kind := !UML::Data_Types::ParameterDirectionKind!.pdk_in;

	// we set the type of the return parameter
	associate ( 
		type           := type         : UML::Core::Classifier,
		typedParameter := newParameter : UML::Core::Parameter
	);
	
	// we add it to the owner
	addParameterToBehavioralFeature (newParameter, owner);
	
	// we return the result
	return newParameter;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Feature
// name     : addFeatureToClassifier
// purpose  : add a feature into a classifier
// in       : theFeature    : the feature
//          : theClassifier : the classifier  
// out      : 
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

addFeatureToClassifier (
	theFeature    : UML::Core::Feature;
	theClassifier : UML::Core::Classifier
)
{
	// we put the feature into the classifier
	associate ( 
		feature := theFeature    : UML::Core::Feature, 
		owner   := theClassifier : UML::Core::Classifier
	);
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Parameter, UML::Core::BehavioralFeature
// name     : addParameterToBehavioralFeature
// purpose  : add a parameter into a behavioral feature
// in       : aParameter         : the parameter
//          : aBehavioralFeature : the behavioral feature
// out      :
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

addParameterToBehavioralFeature (
	aParameter         : UML::Core::Parameter;
	aBehavioralFeature : UML::Core::BehavioralFeature
)
{
	// we put the return parameter into the operation
	associate ( 
		parameter         := aParameter         : UML::Core::Parameter,
		behavioralFeature := aBehavioralFeature : UML::Core::BehavioralFeature
	);
}


////////////////////////////////////////////////////////////////////////////////////
// category : 
// name     : 
// purpose  : 
// in       :
// out      :
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

addModelElementToNameSpace (
	aModelElement : UML::Core::ModelElement;
	aNameSpace    : UML::Core::NameSpace
)
{
	// we put the return parameter into the operation
	associate ( 
		ownedElement := aModelElement : UML::Core::ModelElement,
		namespace    := aNameSpace    : UML::Core::NameSpace
	);
}


////////////////////////////////////////////////////////////////////////////////////
// category : 
// name     : 
// purpose  : 
// in       :
// out      :
// remark   : 
////////////////////////////////////////////////////////////////////////////////////
getVisibilityKind (aLabel : Standard::String) : UML::Data_Types::VisibilityKind
{
	result : UML::Data_Types::VisibilityKind;
	
	// WARNING : by default, the visibility is public
	result := !UML::Data_Types::VisibilityKind!.vk_public;
	
	if (aLabel.[=]('vk_public'))
	{
		result := !UML::Data_Types::VisibilityKind!.vk_public;
	}

	if (aLabel.[=]('vk_protected'))
	{
		result := !UML::Data_Types::VisibilityKind!.vk_protected;
	}

	if (aLabel.[=]('vk_private'))
	{
		result := !UML::Data_Types::VisibilityKind!.vk_private;
	}

	if (aLabel.[=]('vk_package'))
	{
		result := !UML::Data_Types::VisibilityKind!.vk_package;
	}
	
	return result;
}



////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

class Feature
{
	visibility : UML::Data_Types::VisibilityKind;
	
	////////////////////////////////////////////////////////////////////////////////////
	make () : UML::Core::Feature
	{
		result : UML::Core::Feature;
		result := new UML::Core::Feature();
		return result;
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	setVisibility (aVisibility : UML::Data_Types::VisibilityKind)
	{
		self.visibility := aVisibility;
	}
	
	////////////////////////////////////////////////////////////////////////////////////
	getVisibility () : UML::Data_Types::VisibilityKind
	{
		return self.visibility;
	}
	
}

