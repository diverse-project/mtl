/******************************************************************************
 * $Id: TP_IM.mtl,v 1.5 2003-12-16 11:19:14 dvojtise Exp $
 * 
 *
 ******************************************************************************/
library TP_IM;

model source_model : RepositoryModel;		// must be a UML1.4 MetaModel
model mdrdriver    : MDRDriver;
model uml_utils    : Utils;

 
/********************************************/
// Entry point operation : main
/********************************************/

main() : Standard::Void
{	 
	// local variables
	mdrdriver         : MDRDriver::MDRModelManager;
	//aTransformation   : PrivatizeAttributeTransformation;
    projectPath       : Standard::String;
	metamodelFilename : Standard::String;
	inputFilename     : Standard::String;
	outputFilename    : Standard::String;
		

	// we define some filenames 
	projectPath       := './';
	metamodelFilename := projectPath.concat ('MetaModel/xmi_1.2/01-02-15.xml');
	// inputFilename     := projectPath.concat ('Uml1.4Models/testposeidon.xmi');
	// outputFilename    := projectPath.concat ('Uml1.4Models/testposeidon_modified.xmi');
	inputFilename     := projectPath.concat ('Uml1.4Models/xmi_1.1/tp_im2.xmi');
	outputFilename    := projectPath.concat ('Uml1.4Models/xmi_1.1/tp_im2_modified.xmi');



    // we initialize the MDR driver			
	mdrdriver := new MDRDriver::MDRModelManager();
	mdrdriver.init();
	 
	// intanciate the model, save result in another file
	source_model := mdrdriver.getModelFromXMI (
		metamodelFilename, 
		'UML',		// name of the root package in the Uml1.4 metamodel
		'UML1.4_model', 
		inputFilename,
		outputFilename
	);

    // we initialize the uml utils
    uml_utils := new Utils ();
    
 	'model connected'.toOut();

	
	test_Utils();	
	
	'That s all folks !'.toOut();
}

test_Utils()
{
	classIterator 	: Standard::Iterator;
	aClass        	: source_model::Core::Class;	
	aMsg			: Standard::String;
	className		: Standard::String;
	docUtils		: Utils::UMLDoc;
	
	docUtils := new uml_utils::UMLDoc().init(source_model);
	
	
	'ShowDirectParent of all classes'.toOut();
	classIterator := !source_model::Core::Class!.allInstances().getNewIterator();
	while classIterator.isOn() 
	{
		aClass := classIterator.item().oclAsType(!source_model::Core::Class!);
		className := aClass.name;
		aMsg := '********Processing class : ';
		aMsg := aMsg.concat(className);
		//aMsg := aMsg.concat(aClass.name);
		aMsg.toOut();
		//docUtils.setValuesName(uml_utils.directSuperClasses(aClass)).toOut();
		// docUtils.flat(aClass, '').toOut();
		// docUtils.short(aClass, '').toOut();
		docUtils.flatShort(aClass, '').toOut();		
		classIterator.next();
	}
}
