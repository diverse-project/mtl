/******************************************************************************
 * $Id: UML_Utils.mtl,v 1.2 2003-12-11 10:37:07 kodent Exp $
 * This library provides tools function to manipulate objects of UML1.4 metamodel
 * It is inspired by some usefull Objecteering J method for some metaclasses.
 * It should avoid to have some repetitive MTL code. 
 * Syntax used : BasicMTL V1.9 syntax cf. basicmtlParser.mtl V1.9
 *
 ******************************************************************************/

library UML_Utils;

model UML : RepositoryModel;		// should be a UML1.4 MetaModel


/******************************************************************************
 * category : 
 * name     : init
 * purpose  : Initialization of the library. A metamodel of UML1.4 has to be given
 * in       : aModel : a UML1.4 metamodel
 * out      : the library itself
 * remark   : 
 ******************************************************************************/

init (aModel : RepositoryModel) : UML_Utils
{
	// we must have a reference to the UML metamodel and keep it
	UML := aModel;
	
	return self;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Operation
// name     : createAndAddOperation
// purpose  : create a new Operation instance and add it to a classifier
// in       : name  : the name of the Operation instance
//          : owner : the classifier of the Operation instance to be created
// out      : a new Operation instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createAndAddOperation (
	name  : Standard::String; 
	owner : UML::Core::Classifier
) : UML::Core::Operation
{
	newOperation : UML::Core::Operation;

	// we create the new operation
	newOperation := new UML::Core::Operation ();

	// we set the name of the operation			
	newOperation.name := name;
	
	// we add the operation to the classifier
	addFeatureToClassifier (newOperation, owner);
	
	// we return the result
	return newOperation;
}

		
////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Method
// name     : createMethod
// purpose  : create a new Method
// in       : theLanguage : the language associated to the Method instance to be created
//          : theBody     : the code associated to the Method instance to be created
// out      : a new Method instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createMethod (
	theLanguage  : Standard::String;
	theBody      : Standard::String
) : UML::Core::Method
{
	newMethod : UML::Core::Method;

	newMethod               := new UML::Core::Method();
	newMethod.body          := new UML::Data_Types::ProcedureExpression();
	newMethod.body.body     := theBody;
	newMethod.body.language := theLanguage;		
		
	return newMethod;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Method
// name     : createAndLinkMethod
// purpose  : create a new Method and link it to a specification
// in       : theLanguage   : the language associated to the Method instance to be created
//          : theBody       : the code associated to the Method instance to be created
//          : specification : an Operation instance as the specification
// out      : a new Method instance
// remark   : the created Method instance is added to the same classifier as the specification 
////////////////////////////////////////////////////////////////////////////////////

createAndLinkMethod (
	theLanguage   : Standard::String;
	theBody       : Standard::String;
	specification : UML::Core::Operation
	
) : UML::Core::Method
{
	newMethod : UML::Core::Method;
	owner     : UML::Core::Classifier;

	// we create a new method
	newMethod := createMethod (theLanguage, theBody);
	
	// we retrieve the owner of the specification
	owner := specification.owner;
	
	// we add the method to the classifier
	addFeatureToClassifier (newMethod, owner);
	
	// we associate the method with the operation
	associate ( 
		specification := specification : UML::Core::Operation,
		method        := newMethod     : UML::Core::Method
	);
		
	// we return the result
	return newMethod;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Feature
// name     : addFeatureToClassifier
// purpose  : add a feature into a classifier
// in       : theFeature    : the feature
//          : theClassifier : the classifier  
// out      : 
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

addFeatureToClassifier (
	theFeature    : UML::Core::Feature;
	theClassifier : UML::Core::Classifier
)
{
	// we put the feature into the classifier
	associate ( 
		feature := theFeature    : UML::Core::Feature, 
		owner   := theClassifier : UML::Core::Classifier
	);
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Parameter
// name     : createAndAddTypedReturnParameter
// purpose  : create a return parameter and add it to a behavioral feature
// in       : type  : the type of the Parameter instance to be created
//          : owned : the BehavioralFeature to put the parameter into
// out      : a new Parameter instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createAndAddTypedReturnParameter (
	type  : UML::Core::Classifier;
	owner : UML::Core::BehavioralFeature
) : UML::Core::Parameter
{
	returnParameter : UML::Core::Parameter;

	// we create a new typed parameter
	returnParameter      := new UML::Core::Parameter();
	returnParameter.kind := !UML::Data_Types::ParameterDirectionKind!.pdk_return;

	// we set the type of the return parameter
	associate ( 
		type           := type              : UML::Core::Classifier,
		typedParameter := returnParameter   : UML::Core::Parameter
	);
	
	// we add it to the owner
	addParameterToBehavioralFeature (returnParameter, owner);
	
	// we return the result
	return returnParameter;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Parameter
// name     : createAndAddTypedParameter
// purpose  : create a 'in' parameter and add it to a behavioral feature
// in       : name  : name of the Parameter instance to be created
//          : type  : the type of the Parameter instance to be created
//          : owned : the BehavioralFeature to put the parameter into
// out      : a new Parameter instance
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

createAndAddTypedParameter (
	name  : Standard::String;
	type  : UML::Core::Classifier;
	owner : UML::Core::BehavioralFeature
) : UML::Core::Parameter
{
	newParameter : UML::Core::Parameter;

	// we create a new typed parameter
	newParameter      := new UML::Core::Parameter();
	newParameter.name := name;
	newParameter.kind := !UML::Data_Types::ParameterDirectionKind!.pdk_in;

	// we set the type of the return parameter
	associate ( 
		type           := type         : UML::Core::Classifier,
		typedParameter := newParameter : UML::Core::Parameter
	);
	
	// we add it to the owner
	addParameterToBehavioralFeature (newParameter, owner);
	
	// we return the result
	return newParameter;
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::Parameter, UML::Core::BehavioralFeature
// name     : addParameterToBehavioralFeature
// purpose  : add a parameter into a behavioral feature
// in       : aParameter         : the parameter
//          : aBehavioralFeature : the behavioral feature
// out      :
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

addParameterToBehavioralFeature (
	aParameter         : UML::Core::Parameter;
	aBehavioralFeature : UML::Core::BehavioralFeature
)
{
	// we put the return parameter into the operation
	associate ( 
		parameter         := aParameter         : UML::Core::Parameter,
		behavioralFeature := aBehavioralFeature : UML::Core::BehavioralFeature
	);
}


////////////////////////////////////////////////////////////////////////////////////
// category : UML::Core::ModelElement
// name     : IsModelElementTaggedValue
// purpose  : Tells if a model element has a given tagged value (given as a string)
// in       :
// out      :
// remark   : 
////////////////////////////////////////////////////////////////////////////////////

IsModelElementTaggedValue (
	elt : source_model::Core::ModelElement;
	value : Standard::String
) : Standard::Boolean
{
	result   : Standard::Boolean;
	iterator : Standard::Iterator;
	tg       : source_model::Core::TaggedValue;
	tgval    : Standard::String;
	itValue  : Standard::Iterator;
	
	result := false;

	iterator := elt.taggedValue.getNewIterator();
	iterator.start();
	while result.[=](false).[and] (iterator.isOn()) 
	{		
		tg := iterator.item().oclAsType(!source_model::Core::TaggedValue!);

		itValue := tg.dataValue.getNewIterator ();
		itValue.start();
		while result.[=](false).[and] (itValue.isOn())
		{
			tgval := itValue.item().oclAsType(!Standard::String!);
			if (tgval.[=](value))
			{
				result := true;
			}
			itValue.next();
		}
		iterator.next();
	}
	
	return result;
}
	