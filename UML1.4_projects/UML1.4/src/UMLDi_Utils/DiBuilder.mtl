/******************************************************************************
 * $Id: DiBuilder.mtl,v 1.2 2005-01-18 16:41:59 dvojtise Exp $
 * This library provides tools function to manipulate objects of UML1.4 + Diagram interchange2.0 metamodel
 *
 ******************************************************************************/

library UMLDi_Utils;



/********************************************
 * classe UMLDiBuilder
 * Description : provides functions to build DiagramElements of a UML1.4 + Diagram interchange2.0 model
 ********************************************/
class UMLDiBuilder 
{
	/******************************************************************************
	 * category : 
	 * name     : init
	 * purpose  : Initialization of the library. A metamodel of UML1.4 + Diagram interchange2.0 has to be given
	 * in       : aModel : a UML1.4 + Diagram interchange2.0 metamodel
	 * out      : the library itself
	 * remark   : 
	 ******************************************************************************/
	
	init (aModel : RepositoryModel) : UMLDiBuilder
	{
		// we must have a reference to the UML metamodel and keep it
		UMLDi := aModel;
		
		return self;
	}
	/******************************************************************************
	 * category : 
	 * name     : createSimpleSemanticModelGraphNode
	 * purpose  : Create a new GraphNode associated to a simpleSemanticModel
	 * in       : a simpleSemanticModelName, position and size
	 * out      : GraphNode
	 * remark   : 
	 ******************************************************************************/
	createSimpleSemanticModelGraphNode(simpleSemanticModelName : Standard::String; x, y, width, height : Standard::Real ) : UMLDi::Diagram_Interchange::GraphNode
	{
		aGN : UMLDi::Diagram_Interchange::GraphNode;
		aSm : UMLDi::Diagram_Interchange::SimpleSemanticModelElement;
		

		'adding simpleSemanticModelGN '.concat(simpleSemanticModelName).toOut();
		aGN := new UMLDi::Diagram_Interchange::GraphNode();		
		aGN.isVisible := true;
		setPositionOnGraphNode(aGN);	
		setSizeOnGraphNode(aGN);	
		aSm := new UMLDi::Diagram_Interchange::SimpleSemanticModelElement();
		aSm.presentation := '';
		aSm.typeInfo := simpleSemanticModelName;		
		associate ( semanticModel := aSm : UMLDi::Diagram_Interchange::SemanticModelBridge,
					graphElement := aGN : UMLDi::Diagram_Interchange::GraphElement);									
					
		return aGN;
	}
	/* add a GraphNode for this Operation in this class's GraphNode
	 * pre: classGN must be a class GraphNode
	 */
	addOperationGraphNodeOnClassGraphNode(op      : UMLDi::Core::Operation; 
										  classGN : UMLDi::Diagram_Interchange::GraphNode)
	{
		operationCompartmentGN 	: UMLDi::Diagram_Interchange::GraphNode;
		delimitedSectionGN 		: UMLDi::Diagram_Interchange::GraphNode;
		operationGN  			: UMLDi::Diagram_Interchange::GraphNode;
		
		opSm, opVisSm, opNameSm	: UMLDi::Diagram_Interchange::SemanticModelBridge;
		opVisibilityGN   		: UMLDi::Diagram_Interchange::GraphNode;
		opNameGN   				: UMLDi::Diagram_Interchange::GraphNode;
		opParameterStartGN		: UMLDi::Diagram_Interchange::GraphNode;
		opParameterEndGN		: UMLDi::Diagram_Interchange::GraphNode;
		opTypeSeparatorGN		: UMLDi::Diagram_Interchange::GraphNode;
		
		pos : 	UMLDi::Diagram_Interchange::Point;
		
		
		// find the OperationCompartment GraphNode; if not found create one
		foreach (containedGNInClassGN : UMLDi::Diagram_Interchange::GraphNode)
			in (classGN.contained) where (containedGNInClassGN.semanticModel.oclIsKindOf(!UMLDi::Diagram_Interchange::SimpleSemanticModelElement!))
		{			
			if( containedGNInClassGN.semanticModel.typeInfo = 'OperationCompartment')
			{
				operationCompartmentGN := containedGNInClassGN;
				'OperationCompartment found'.toOut();
			}
		}
		if isNull(operationCompartmentGN)
		{
			'Error, must create an operationCompartment GraphNode before'.toOut();
			'Usually a correct Class Graphnode must have one'.toOut();
		}
		// find the first DelimitedSection in this OperationCompartment; if not found create one
		foreach (containedGNInOpCompGN : UMLDi::Diagram_Interchange::GraphNode)
			in (operationCompartmentGN.contained) where (operationCompartmentGN.semanticModel.oclIsKindOf(!UMLDi::Diagram_Interchange::SimpleSemanticModelElement!))
		{			
			if( containedGNInOpCompGN.semanticModel.typeInfo = 'DelimitedSection')
			{
				delimitedSectionGN := containedGNInOpCompGN;
				'DelimitedSection found'.toOut();
			}
		}
		if isNull(delimitedSectionGN)
		{
			'Error, must create a DelimitedSection GraphNode before'.toOut();
			'Usually a correct Class Graphnode must have one'.toOut();
		}
		// add a new Graphnode linked to this Operation
		operationGN := new UMLDi::Diagram_Interchange::GraphNode();		
		setPositionOnGraphNode(operationGN);
		setSizeOnGraphNode(operationGN);
		operationGN.isVisible := true;
		
		// SemanticBridge
		opSm := new UMLDi::Diagram_Interchange::Uml1SemanticModelBridge();
		opSm.presentation := '';
		'before associate'.toOut();
		associate ( element := op : UMLDi::Core::Element, uml1SemanticModelBridge := opSm : UMLDi::Diagram_Interchange::Uml1SemanticModelBridge);
		'after associate'.toOut();
		associate ( semanticModel := opSm : UMLDi::Diagram_Interchange::SemanticModelBridge,
					graphElement := operationGN : UMLDi::Diagram_Interchange::GraphElement);
		
		// create the operation GraphNode structure
			// Create the Visibility GraphNode
		opVisibilityGN := createSimpleSemanticModelGraphNode('Visibility', 0, 0, 6.4238, 15);		
		associate ( contained := opVisibilityGN : UMLDi::Diagram_Interchange::Diagramelement,
					container := operationGN : UMLDi::Diagram_Interchange::GraphElement);		
			// Create the Name GraphNode
		opNameGN := createSimpleSemanticModelGraphNode('Name', 79.8145, 0, 3.6631, 15);
		associate ( contained := opNameGN : UMLDi::Diagram_Interchange::Diagramelement,
					container := operationGN : UMLDi::Diagram_Interchange::GraphElement);		
			// Create the ParameterStart GraphNode
		opParameterStartGN := createSimpleSemanticModelGraphNode('ParameterStart', 79.8145, 0, 3.6631, 15);								
		associate ( contained := opParameterStartGN 	: UMLDi::Diagram_Interchange::Diagramelement,
					container := operationGN 		: UMLDi::Diagram_Interchange::GraphElement);
			// Create the ParameterEnd GraphNode
		opParameterEndGN := createSimpleSemanticModelGraphNode('ParameterEnd', 83.4775, 0, 3.6631, 15);								
		associate ( contained := opParameterEndGN 	: UMLDi::Diagram_Interchange::Diagramelement,
					container := operationGN 		: UMLDi::Diagram_Interchange::GraphElement);
			// Create the TypeSeparator GraphNode
		opTypeSeparatorGN := createSimpleSemanticModelGraphNode('TypeSeparator', 87.1406, 0, 3.6631, 15);							
		associate ( contained := opTypeSeparatorGN 	: UMLDi::Diagram_Interchange::Diagramelement,
					container := operationGN 		: UMLDi::Diagram_Interchange::GraphElement);
		
		
		
		
		// associate this stuffes to the DelimitedSection
		associate ( contained := operationGN : UMLDi::Diagram_Interchange::Diagramelement,
					container := delimitedSectionGN : UMLDi::Diagram_Interchange::GraphElement);
		
		// addParametersGN to this structure ?
	}
	
	
	/* 
	 * create a position field for this GraphNode
	 */
	setPositionOnGraphNode(aGN : UMLDi::Diagram_Interchange::GraphNode)
	{
	 // BUG ? I don't know how to do that directly in MTL
	 // so here is a code that does that using Posidon api
		JavaCode [

	com.gentleware.jboogie.model_management.DiFactory aDiFactory;
	org.irisa.triskell.MT.repository.genericJMIDriver.JMIModelElement jmi_me;
	org.omg.uml2.diagraminterchange.GraphNode gn;
	
	jmi_me = (org.irisa.triskell.MT.repository.genericJMIDriver.JMIModelElement)(BMTL_aGN.getModelElementDelegate());
	gn =(org.omg.uml2.diagraminterchange.GraphNode)jmi_me.getRefObject();
	aDiFactory = com.gentleware.poseidon.openapi.PoseidonProjectConnector.getCurrentProject().getDiFactory();

	gn.setPosition(aDiFactory.createPoint(0,0));
];


	}
	/* 
	 * create a size field for this GraphNode
	 */	
	setSizeOnGraphNode(aGN : UMLDi::Diagram_Interchange::GraphNode)
	{
		 // BUG ? I don't know how to do that directly in MTL
	 // so here is a code that does that using Posidon api
			JavaCode [

	com.gentleware.jboogie.model_management.DiFactory aDiFactory;
	org.irisa.triskell.MT.repository.genericJMIDriver.JMIModelElement jmi_me;
	org.omg.uml2.diagraminterchange.GraphNode gn;
	
	jmi_me = (org.irisa.triskell.MT.repository.genericJMIDriver.JMIModelElement)(BMTL_aGN.getModelElementDelegate());
	gn =(org.omg.uml2.diagraminterchange.GraphNode)jmi_me.getRefObject();
	aDiFactory = com.gentleware.poseidon.openapi.PoseidonProjectConnector.getCurrentProject().getDiFactory();

	gn.setSize(aDiFactory.createDimension(0,0));
];
	}
	
}
