<!-- $Id: sample_build.xml,v 1.2 2003-09-05 12:12:37 dvojtise Exp $ -->
<project name="BasicMtl_Transformation_libraires" default="run test1" basedir=".">
	<description>
        Sample Build file for using the BasicMTL compiler
	</description>
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="base" location="."/>
	<property name="bin" location="bin"/>
	<property name="build" location="build"/>
	<property name="MTLcompiler.jar.path" location="../bin"/>
	
	<!-- classpath for compiling and running MTL file -->
	<path id="MTLcompiler.class.path">
    	<pathelement path="${java.class.path}/"/>
    	<pathelement path="."/>
    	<pathelement path="${MTLcompiler.jar.path}\MTDataTypes.jar"/>
    	<pathelement path="${MTLcompiler.jar.path}\BasicMTLRuntime.jar"/>
    	<pathelement path="${MTLcompiler.jar.path}\RepositoryAPI.jar"/>
    	<pathelement path="${MTLcompiler.jar.path}\MDRDriver.jar"/>
    	<pathelement path="${MTLcompiler.jar.path}\Utils.jar"/>
    	<pathelement path="${MTLcompiler.jar.path}\Thirdparty\ANTLR\antlrfull.jar"/>
    	<pathelement path="${MTLcompiler.jar.path}\Thirdparty\log4j\log4j.jar"/>
    <!--	<pathelement path="${MTLcompiler.jar.path}\bin"/> -->
  	</path>
	
	
	<!-- tools -->
	<property name="ANTLR2TLL" location="${MTLcompiler.jar.path}/TLLTypeChecker.jar"/>
	<property name="CodeGenerator" location="${MTLcompiler.jar.path}/BasicMtlJavaCodeGenerator.jar"/>

	<target name="init">
    	<!-- Create the time stamp -->
    	<tstamp/>
	    <!-- Create the build directory structure used by compile -->
    	<mkdir dir="${build}"/>
	    <mkdir dir="${build}/src"/>
	    <mkdir dir="${build}/src/UncheckedTLL"/>
	    <mkdir dir="${build}/src/TLL"/>
	    <mkdir dir="${build}/src/java"/>
	    <mkdir dir="${bin}"/>
	</target>
	
	<target name="clean" depends="clean test1,clean test2, clean Standard, clean MDRDriver"
        description="clean up " >
    	<!-- Delete the ${build}, {$bin} and ${dist} directory trees -->
  	</target>
  	
  	<target name="clean test1"
        description="clean up test1" >
    	<!-- Delete the ${build}, {$bin} and ${dist} directory trees -->
    	<delete dir="${build}/src/java/test1"/>    
    	<delete file="${build}/src/TLL/aLibrary.tll"/>
    	<delete file="${build}/src/TLL/AnotherLibrary.tll"/>    
    	<delete file="${build}/src/UncheckedTLL/aLibrary.tll"/>
    	<delete file="${build}/src/UncheckedTLL/AnotherLibrary.tll"/>
  	</target>
  	
  	<target name="clean test2"
        description="clean up test2" >
    	<!-- Delete the ${build}, {$bin} and ${dist} directory trees -->
    	<delete dir="${build}/src/java/test2"/>    
    	<delete file="${build}/src/TLL/Test2LibraryA.tll"/>    	
    	<delete file="${build}/src/UncheckedTLL/Test2LibraryA.tll"/>
    	
  	</target>
  	
  	<target name="clean SimpleUML"
        description="clean up SimpleUML" >
    	<!-- Delete the ${build}, {$bin} and ${dist} directory trees -->
    	<delete dir="${build}/src/java/SimpleUML"/>    
    	<delete file="${build}/src/TLL/SimpleUML_Transformations.tll"/>   
    	<delete file="${build}/src/UncheckedTLL/SimpleUML_Transformations.tll"/>
  	</target>
  	<target name="clean Standard"
        description="clean up Standard lib" >
    	<!-- Delete the ${build}, {$bin} and ${dist} directory trees -->
    	<delete dir="${build}/src/java/Standard"/>    
    	<delete dir="${build}/src/UncheckedTLL/Standard.tll"/>
    	<delete dir="${build}/src/TLL/Standard.tll"/>    
  	</target>  	
	<target name="clean MDRDriver"
        description="clean up MDRDriver" >
    	<!-- Delete the ${build}, {$bin} and ${dist} directory trees -->
    	<delete dir="${build}/src/java/MDRDriver"/>    
    	<delete file="${build}/src/UncheckedTLL/MDRDriver.tll"/> 
    	<delete file="${build}/src/TLL/MDRDriver.tll"/> 
  	</target>
  	
  	<!-- SimpleUML_Transformations -->  	
  	<target name="generate_SimpleUML" depends="init,generate_SimpleUML_Transformations">  	
  		<description>
  			generate the java code for SimpleUML
  		</description>
  	</target>
  	<target name="generate_SimpleUML_Transformations" >
  		<antcall target="MTL2Java" inheritAll="true">
  			<param name="mtlsrcfile" value="${src}\SimpleUML\SimpleUML_Transformations.mtl" />  
  			<param name="packagename" value="SimpleUML" /> 
  			<param name="libname" value="SimpleUML_Transformations" /> 
  		</antcall>
  	</target>
  	<target name="compile_SimpleUML_generated_code" depends="generate_SimpleUML">
  		<description>
  			compile the generated Java Code
  		</description>
  		<javac srcdir="${build}\src\java\SimpleUML" 
    	    destdir="${bin}"
   			debug="true">
   			<classpath refid="MTLcompiler.class.path"/>
   		</javac>
  	</target>
  	<target name="run SimpleUML" depends="compile_SimpleUML_generated_code">
  		<description>
  			run the generated Java Code
  		</description>
  		<java classname="SimpleUML.BMTLLib_SimpleUML_5fTransformations" fork="yes">
   			<classpath >
   				<pathelement path="${bin}"/>
   				<path refid="MTLcompiler.class.path"/>
   			</classpath>
   		</java>
  	</target>
    	
  	
  	<!-- test1 -->  	
  	<target name="generate_test1" depends="init,generate_test1a,generate_test1b">  	
  		<description>
  			generate the java code for test1
  		</description>
  	</target>
  	<target name="generate_test1a" depends="generate_test1b">
  		<antcall target="MTL2Java" inheritAll="true">
  			<param name="mtlsrcfile" value="${src}\test1\test1a.mtl" />  
  			<param name="packagename" value="test1" /> 
  			<param name="libname" value="aLibrary" /> 
  		</antcall>
  	</target>
  	<target name="generate_test1b" >
  		<antcall target="MTL2Java" inheritAll="true">
  			<param name="mtlsrcfile" value="${src}\test1\test1b.mtl" /> 
  			<param name="packagename" value="test1" /> 
  			<param name="libname" value="AnotherLibrary" /> 
  		</antcall>
  	</target>
  	<target name="compile_test1_generated_code" depends="generate_test1">
  		<description>
  			compile the generated Java Code
  		</description>
  		<javac srcdir="${build}/src/java/test1" 
    	    destdir="${bin}"
   			debug="true">
   			<classpath refid="MTLcompiler.class.path"/>
   		</javac>
  	</target>
  	<target name="run test1" depends="compile_test1_generated_code">
  		<description>
  			run the generated Java Code
  		</description>
  		<java classname="test1.BMTLLib_aLibrary">
   			<classpath >
   				<pathelement path="${bin}"/>
   				<path refid="MTLcompiler.class.path"/>
   			</classpath>
   		</java>
  	</target>
  	
  	<!-- test2 -->
  	<target name="generate_test2" depends="init,generate_test2a">
  		<description>
  			generate the java code for test2
  		</description>
  	</target>
  	<target name="generate_test2a" >
  		<antcall target="MTL2Java" inheritAll="true">
  			<param name="mtlsrcfile" value="${src}\test2\test2a.mtl" /> 
  			<param name="packagename" value="test2" /> 
  			<param name="libname" value="Test2LibraryA" /> 
  		</antcall>
  	</target>
  	<target name="compile_test2_generated_code" depends="generate_test2">
  		<description>
  			compile the generated Java Code
  		</description>
  		<javac srcdir="${build}/src/java/test2" 
    	    destdir="${bin}"
   			debug="true">
   			<classpath >
   				<pathelement path="${bin}"/>
   				<path refid="MTLcompiler.class.path"/>
   			</classpath>
   		</javac>
  	</target>
	<target name="run test2" depends="compile_test2_generated_code">
  	<!--<target name="run test2" >-->
  		<description>
  			run the generated Java Code
  		</description>
  		<java classname="test2.BMTLLib_Test2LibraryA" fork="yes" >
   			<classpath >
   				<pathelement path="${bin}"/>
   				<path refid="MTLcompiler.class.path"/>
   			</classpath>
   		</java>
  	</target>
  	
  	<!-- compile Standard and repositoryDriver --> 
  	<target name="init Standard and repositoryDriver">
  		<mkdir dir="${bin}"/>
  		<mkdir dir="${bin}/Standard"/>
  		<mkdir dir="${bin}/RepositoryDriver"/>
  		<mkdir dir="${bin}/MDRDriver"/>
  	</target>
  	<target name="generate_Standard" depends="init Standard and repositoryDriver">
  		<antcall target="Lazy_MTL2Java" inheritAll="true">
  			<param name="mtlsrcfile" value="${src}\lang\src\Standard.mtl" /> 
  			<param name="packagename" value="Standard" /> 
  			<param name="libname" value="Standard" /> 
  		</antcall>
  	</target>
  	<target name="compile_Standard_generated_code" depends="generate_Standard, compile MDRRepositoryModelManager">
  		<description>
  			compile the generated Java Code
  		</description>
  		<javac srcdir="${build}/src/java" 
    	    destdir="${bin}"
   			debug="true">
   			<classpath >
   				<pathelement path="${bin}"/>
   				<path refid="MTLcompiler.class.path"/>
   			</classpath>
   		</javac>
  	</target>
  	<target name="generate_MDRDriver" depends="generate_Standard">
  		<antcall target="Lazy_MTL2Java" inheritAll="true">
  			<param name="mtlsrcfile" value="${src}\RepositoryDriver\MDRDriver.mtl" /> 
  			<param name="packagename" value="MDRDriver" /> 
  			<param name="libname" value="MDRDriver" /> 
  		</antcall>
  	</target>
  	<target name="compile MDRRepositoryModelManager">  		  		
  		<javac srcdir="${src}" 
    	    destdir="${bin}"
   			debug="true">
   			<classpath refid="MTLcompiler.class.path"/>
   		</javac>
  	</target>
  	<target name="compile_MDRDriver_generated_code" depends="generate_MDRDriver,compile_Standard_generated_code">
  		<description>
  			compile the generated Java Code
  		</description>
  		<javac srcdir="${build}/src/java" 
    	    destdir="${bin}"
   			debug="true">
   			<classpath >
   				<pathelement path="${bin}"/>
   				<path refid="MTLcompiler.class.path"/>
   			</classpath>
   		</javac>
  	</target>
  	<target name="compile Standard and MDRDriver" depends="compile_MDRDriver_generated_code, compile MDRRepositoryModelManager">
  		
  	</target>
  	
  	<!-- generic tasks -->
  	<target name="MTL2TLL" depends="init" unless="MTL2TLL.${libname}.notRequired"
  	 	description="generic target mtl to a TLL">
  	 	<echo>${libname}</echo>
  	 	<!-- <echo> java -jar ${ANTLR2TLL} ${mtlsrcfile} -TLLPath ${build}/src/ -PackageName ${packagename}</echo>	 	-->
	 	<java jar="${ANTLR2TLL}" 
           fork="true"
           failonerror="true"
           >
         <arg value="${mtlsrcfile}"/> 
         <arg value="-TLLPath"/> 
         <arg value="${build}/src/"/> 
         <arg value="-PackageName"/> 
         <arg value="${packagename}"/> 
       </java> 
	</target>
  	<target name="TLL2Javacode" depends="MTL2TLL" unless="TLL2Javacode.${libname}.notRequired">
  		<description>
  			generic target : 
  			inputs : mtlsrcfile, packagename, libname
  			
  		</description>
  	 	<echo>${libname}</echo>
  		<mkdir dir="${build}\src\java\${packagename}"/>
  		<java jar="${CodeGenerator}" 
           fork="true"
           failonerror="true"
           >
         <arg value="${libname}"/> 
         <arg value="-TLLPath"/> 
         <arg value="${build}/src/"/> 
         <arg value="-BinPath"/> 
         <arg value="${build}/src/java/${packagename}/"/> 
       </java>
  	</target>
  	
  	<target name="MTL2Java" depends="TLL2Javacode" > 
  		<description>
  			generic target : 
  			inputs : mtlsrcfile, packagename, libname
  			
  		</description>  		
  	</target>  	
  	<!-- this a a lazy version that do not generate java file if not needed -->
  	<target name="Lazy_MTL2Java" > 
  		<description>
  			generic target : 
  			inputs : mtlsrcfile, packagename, libname
  			
  		</description>  
  		<uptodate property="TLL2Javacode.${libname}.notRequired" srcfile="${mtlsrcfile}" targetfile="${build}/src/TLL/${libname}.tll"/>
  		<uptodate property="MTL2TLL.${libname}.notRequired" srcfile="${mtlsrcfile}" targetfile="${build}/src/UncheckedTLL/${libname}.tll"/>
  	  		 		
  		<antcall target="TLL2Javacode"/>
  	</target>
  	

</project>
