<!-- $Id: LibAssociation_build.xml,v 1.13 2004-10-26 12:31:03 dvojtise Exp $ -->
<project name="BasicMtl2Java_LibAssociation" default="dist" basedir=".">
	<description>
        Build file for the BasicMTL2Java compiler with support for association
        This build is the last pass for the bootstrap, it compiles mtl files using first pass bootstrap version of the compiler
        if recompile with itself files should be identical (to be tested)
	</description>
	<!-- set global properties for this build -->
	<property name="distname" location="LibAssociation"/>
	<property name="src" location="${distname}/src"/>
	<property name="bin" location="${distname}/bin"/>
	<property name="build" location="${distname}/build"/>
	<property name="dist"  location="${distname}/dist"/>
	<property name="base"  location=".."/>
	
	<property name="MDRDriver.project.dir" location="../MDRDriver"/>
	<property name="PoseidonDriver.project.dir" location="../PoseidonDriver"/>
	<property name="ModFactDriver.project.dir" location="../ModFactDriver"/>
	<property name="EMFDriver.project.dir" location="../org.inria.EMFDriver"/>
	
	<!-- The compilation tool (link to the BasicMTL compiler used to compile this version) -->
	<property name="MTLcompiler.jar.path" location="LibAssociationBoot/dist/bin"/>
	<property name="MTLcompiler.Runtime.path" location="LibAssociationBoot/dist/bin/Runtime"/>
	<property name="ANTLR2JavaCode" location="${MTLcompiler.jar.path}/BasicMTLc.jar"/>
	
	<!-- classpath for compiling the compiler -->
	<path id="compileCompiler.class.path">
    	<pathelement path="${dist}\bin\ThirdParty\ANTLR\antlrfull.jar"/>
    	<pathelement path="${dist}\bin\ThirdParty\log4j\log4j.jar"/>
    	<pathelement path="${dist}\bin\ThirdParty\JUnit\junit.jar"/>
    	<pathelement path="${dist}\bin\ThirdParty\JMI\jmi.jar"/>
    	<pathelement path="${dist}\bin\ThirdParty\JMI\mof.jar"/>
    	
  	</path>
	
	<target name="init">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="init common" inheritAll="true"/>
		<!-- specific initialization -->
	</target>    
	<target name="clean">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="clean common" inheritAll="true"/>
		<!-- specific cleanup -->
	</target>    
	<target name="clean all">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="clean all common" inheritAll="true"/>
		<!-- specific cleanup -->
	</target>   
	<target name="get_jars">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="get_jars common" inheritAll="true"/>
		<!-- specific jar files to get in this distribution -->
	</target>   
	<target name="get_sources">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="get_sources common" inheritAll="true"/>
		<!-- specific source files to get in this distribution -->
	</target>	
	<target name="generate_java" depends="get_sources, get_jars">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="generate_java common" inheritAll="true"/>
		<!-- specific java generation steps -->				
	</target>  
	<target name="compile" depends="init, generate_java">
		<!-- call common part -->
		<!--<echo> classpath = ${compileCompiler.class.path}</echo>-->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="compile common" inheritAll="true" inheritrefs="true">
			<reference refid="compileCompiler.class.path"/>
		</ant>
		<!-- specific compile steps -->				
	</target>
	<target name="create_jar" depends="compile">
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="create_jar common" inheritAll="true"/>
		<!-- specific jar creation steps -->				
	</target>
	<target name="dist" depends="create_jar" >
		<!-- call common part -->
		<ant antfile="LibAssociation_common_build.xml" dir="." target="dist common" inheritAll="true"/>
		<!-- specific jar creation steps -->
		<!-- post action-->
		<antcall target="compile_dependent_external_jars"/>
	</target>
	<target name="compile_dependent_external_jars" 
		description="compiles the jars that are part of this distibution but that need a version of the compiler (eg. dirvers)">
		<ant antfile="${MDRDriver.project.dir}/main_build.xml" dir="${MDRDriver.project.dir}" target="compile" inheritAll="false"/>
		<ant antfile="${ModFactDriver.project.dir}/main_build.xml" dir="${ModFactDriver.project.dir}" target="compile" inheritAll="false"/>
		<!-- <ant antfile="${PoseidonDriver.project.dir}/main_build.xml" dir="${PoseidonDriver.project.dir}" target="compile" inheritAll="false"/>-->
		<ant antfile="${EMFDriver.project.dir}/main_build.xml" dir="${EMFDriver.project.dir}" target="compile" inheritAll="false"/>
	</target>
	<target name="get_dependent_external_jars" depends="compile_dependent_external_jars"
			description="get the jars that are part of this distibution but that need a version of the compiler (eg. dirvers)">

		<!-- MDR -->
  		<copy  todir="${dist}/bin">
  			<fileset dir="${MDRDriver.project.dir}/lib/"/>
  		</copy>
		<copy  todir="${dist}/Runtime/src/TLL">
			<fileset dir="${MDRDriver.project.dir}/build/TLL/"/>
		</copy>
		<!-- ModFact -->
		<copy  todir="${dist}/bin">
			<fileset dir="${ModFactDriver.project.dir}/lib/"/>
		</copy>
		<copy  todir="${dist}/Runtime/src/TLL">
			<fileset dir="${ModFactDriver.project.dir}/build/TLL/"/>
		</copy>
		<!--Poseidon -->
	<!--	<copy  todir="${dist}/bin">
			<fileset dir="${PoseidonDriver.project.dir}/lib/"/>
		</copy>
		<copy  todir="${dist}/Runtime/src/TLL">
			<fileset dir="${PoseidonDriver.project.dir}/build/TLL/"/>
		</copy> -->
		<!-- EMF -->
		<copy  todir="${dist}/bin">
			<fileset dir="${EMFDriver.project.dir}/lib/"/>
		</copy>
		<copy  todir="${dist}/Runtime/src/TLL">
			<fileset dir="${EMFDriver.project.dir}/build/TLL/"/>
		</copy>
	</target>
</project>