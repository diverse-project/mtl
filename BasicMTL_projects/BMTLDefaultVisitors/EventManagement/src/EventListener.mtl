library EventManagement;


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class EventListener 
{
	cmd : EventCommand;
	elt : Standard::ModelElement;

	init (cmd : EventCommand) : EventListener
	{
		this.cmd := cmd;
		return this;
	}

	/** */	
	connect (elt : Standard::ModelElement) 
	{
	}	
	
	/** */
	update (event : Event) 
	{
		// by default, the command is used, but it is still possible to overload this method directly
		if (isNull(this.cmd).not())
		{
			this.cmd.update (event);
		}
		else
		{
			'EventListener uses default update method but without a defined EventCommand object...'.toErr();
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class AttributeEventListener extends EventListener
{
	/** */	
	connect (elt : Standard::ModelElement) 
	{
		JavaCode 
		[ 
			final BMTLModelElement me = (BMTLModelElement)BMTL_elt; // final is mandatory here because the var is used in an anonymous class
	
	        EventListener listener = me.getAPI().getEventListenerFactory().createAttributeEventListener (
	        		new EventListenerCommand () {
						public void update (Event event) {
							// this kind of event listener is supposed to retrieve attribute events.
							AttributeEvent theEvent = (AttributeEvent)event;
							
							try {
								// we build an MTL AttributeEvent instance
								EventManagement.BMTL_AttributeEventInterface BMTL_evt = (EventManagement.BMTL_AttributeEventInterface)CommonFunctions.toBMTLDataType (
									((InstanciableType)getLibrary().getMetaClass (
										new String [\] {"EventManagement", "AttributeEvent"})).instanciate()
								);

								// we set the attributes of the object
								BMTL_evt.set_BMTL_kind          (new BMTLString(theEvent.getKind().toString()));
								BMTL_evt.set_BMTL_source        (me);
								BMTL_evt.set_BMTL_attributeName ((BMTLStringInterface)CommonFunctions.toBMTLDataType (theEvent.getAttributeName()));
								BMTL_evt.set_BMTL_oldValue      ((BMTLOclAnyInterface)CommonFunctions.toBMTLDataType (theEvent.getOldValue()));
								BMTL_evt.set_BMTL_newValue      ((BMTLOclAnyInterface)CommonFunctions.toBMTLDataType (theEvent.getNewValue()));

								// we call the update method
								theCaller.BMTL_update (BMTL_evt);
							}
							catch (Throwable e) {
								e.printStackTrace();
							}
						}
	        		}
	        );

			// we add the built listener to the element	        
	        me.addListener (listener);
		];
	}	
}


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class AssociationEventListener extends EventListener
{
	/** */	
	connect (elt : Standard::ModelElement) 
	{
		JavaCode 
		[ 
			final BMTLModelElement me = (BMTLModelElement)BMTL_elt;
	
	        EventListener listener = me.getAPI().getEventListenerFactory().createAssociationEventListener (
	        		new EventListenerCommand () {
						public void update (Event event) {
							// this kind of event listener is supposed to retrieve association events.
							AssociationEvent theEvent = (AssociationEvent)event;
							
							try {
								// we build an MTL AssociationEvent instance
								EventManagement.BMTL_AssociationEventInterface BMTL_evt = (EventManagement.BMTL_AssociationEventInterface)CommonFunctions.toBMTLDataType (
									((InstanciableType)getLibrary().getMetaClass (
										new String [\] {"EventManagement", "AssociationEvent"})).instanciate()
								);

								// we set the attributes of the object
								BMTL_evt.set_BMTL_kind (new BMTLString(theEvent.getKind().toString()));
								BMTL_evt.set_BMTL_source (me);
								BMTL_evt.set_BMTL_endName ((BMTLStringInterface)CommonFunctions.toBMTLDataType (theEvent.getEndName()));

								// we call the update method
								theCaller.BMTL_update (BMTL_evt);
							}
							catch (Throwable e) {
								e.printStackTrace();
							}
						}
	        		}
	        );

			// we add the built listener to the element	        
	        me.addListener (listener);
		];
	}	
}


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class InstanceEventListener extends EventListener
{
	/** */	
	connect (elt : Standard::ModelElement) 
	{
		JavaCode 
		[ 
			final BMTLModelElement me = (BMTLModelElement)BMTL_elt;
	
	        EventListener listener = me.getAPI().getEventListenerFactory().createInstanceEventListener (
	        		new EventListenerCommand () {
						public void update (Event event) {
							// this kind of event listener is supposed to retrieve instance events.
							InstanceEvent theEvent = (InstanceEvent)event;
							
							try {
								// we build an MTL AssociationEvent instance
								EventManagement.BMTL_InstanceEventInterface BMTL_evt = (EventManagement.BMTL_InstanceEventInterface)CommonFunctions.toBMTLDataType (
									((InstanciableType)getLibrary().getMetaClass (
										new String [\] {"EventManagement", "InstanceEvent"})).instanciate()
								);

								// we set the attributes of the object
								BMTL_evt.set_BMTL_kind (new BMTLString(theEvent.getKind().toString()));
								BMTL_evt.set_BMTL_source (me);

								// we call the update method
								theCaller.BMTL_update (BMTL_evt);
							}
							catch (Throwable e) {
								e.printStackTrace();
							}
						}
	        		}
	        );

			// we add the built listener to the element	        
	        me.addListener (listener);
		];
	}	
}




