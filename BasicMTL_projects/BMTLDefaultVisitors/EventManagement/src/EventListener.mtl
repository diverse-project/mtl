library EventManagement;


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class EventListener 
{
	type : Standard::String;
	cmd : EventCommand;
	elt : Standard::ModelElement;

	init (cmd : EventCommand) : EventListener
	{
		this.type := getType(); // must use an attribute otherwise the polymorphism does not work in the JavaCode section
		this.cmd := cmd;
		return this;
	}

	/** should be abstract */	
	getType () : Standard::String { return null; }

	/** */	
	connect (elt : Standard::ModelElement) 
	{
		JavaCode 
		[ 
			final BMTLModelElement me = (BMTLModelElement)BMTL_elt;
	
	        EventListener listener = me.getAPI().getEventListenerFactory().createEventListenerByType (
	        		get_BMTL_type().getTheString(),
	        		new EventListenerCommand () {
						public void update (Event event) {
							try {
	
								// we build an Event instance
								EventManagement.BMTL_EventInterface BMTL_evt = (EventManagement.BMTL_EventInterface)CommonFunctions.toBMTLDataType (
									((EventManagement.BMTL_EventInterface)CommonFunctions.toBMTLDataType (
										((org.irisa.triskell.MT.DataTypes.Java.commands.InstanciableType)getLibrary().getMetaClass (
											new String [\] {"EventManagement", "Event"})).instanciate()
										)
									)
								);

								if (event instanceof AttributeEvent)
								{
									AttributeEvent theEvent = (AttributeEvent)event;
									BMTL_evt.set_BMTL_kind (new BMTLString(theEvent.getKind().toString()));
									BMTL_evt.set_BMTL_source (me);
								}
								else if (event instanceof AssociationEvent)
								{
									AssociationEvent theEvent = (AssociationEvent)event;
									BMTL_evt.set_BMTL_kind (new BMTLString(theEvent.getKind().toString()));
									BMTL_evt.set_BMTL_source (me);
								}
								else if (event instanceof InstanceEvent)
								{
									InstanceEvent theEvent = (InstanceEvent)event;
									BMTL_evt.set_BMTL_kind (new BMTLString(theEvent.getKind().toString()));
									BMTL_evt.set_BMTL_source (me);
								}
								
								// we call the update method
								get_BMTL_cmd().BMTL_update (BMTL_evt);
							}
							catch (Throwable e) {
								e.printStackTrace();
							}
						}
	        		}
	        );
	        
	        me.addListener (listener);
		];
	}	
}


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class AttributeEventListener extends EventListener
{
	getType () : Standard::String { return 'attribute'; }
}


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class AssociationEventListener extends EventListener
{
	getType () : Standard::String { return 'association'; }
}


////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
class InstanceEventListener extends EventListener
{
	getType () : Standard::String { return 'instance'; }
}




