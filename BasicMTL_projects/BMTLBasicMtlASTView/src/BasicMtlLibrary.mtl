// $Id: BasicMtlLibrary.mtl,v 1.8 2005-07-15 14:27:42 ffondeme Exp $
// part of the BasicMtlASTView Library ( view on ASTJava )
/* version written for basicmtl.g,v 1.2
 *	(cf /udd/triskell/cvsroot/dev/MT/BasicMtlAntlr/ANTLRParser/basicmtl.g,v 1.2)
 */
 
 library BasicMtlASTView;
 
 class BasicMtlLibrary extends Library {
 
	parameters : Standard::Set;
	
	appendParameters ( aModel : ModelRef) : Standard::Void
	{	if isNull(parameters)
			{ JavaCode [BMTL_parameters=new BMTLSet()]; }
		parameters := parameters.including(aModel).oclAsType(!Standard::Set!);
	}

	toASTJava() : ASTJava::Object
	{
	qnames,theParameters,classes,operations,properties : Standard::Iterator;
	aNamePart : Standard::String;
	aParameter : ModelRef;
	aClass : UserClass;
	anOperation : Operation;
	aProperty : Property;
	JavaCode [org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.BasicMtlLibrary theBasicMtlLibrary=new org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.BasicMtlLibrary(this.get_BMTL_name().getTheString())];
	if isNull(self.oclAsType(!Library!).QualifiedName).[not]() {
	qnames := self.oclAsType(!Library!).QualifiedName.getNewIterator();
	qnames.start();
	while qnames.isOn() {
		aNamePart := qnames.item().oclAsType(!Standard::String!);
		JavaCode [theBasicMtlLibrary.appendQualifiedName(BMTL_aNamePart.getTheString())];
		qnames.next();
	}
	}
	if isNull(parameters).[not]() {
	theParameters := parameters.getNewIterator();
	theParameters.start();
	while theParameters.isOn() {
		aParameter := theParameters.item().oclAsType(!ModelRef!);
		JavaCode [theBasicMtlLibrary.appendParameters((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.ModelRef)BMTL_aParameter.BMTL_toASTJava())];
		theParameters.next();
	}
	}
	if isNull(self.oclAsType(!Library!).definedOperations).[not]() {
	operations := self.oclAsType(!Library!).definedOperations.getNewIterator();
	operations.start();
	while operations.isOn() {
		anOperation := operations.item().oclAsType(!Operation!);
		JavaCode [theBasicMtlLibrary.appendDefinedOperations((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Operation)BMTL_anOperation.BMTL_toASTJava())];
		operations.next();
	}
	}
	if isNull(self.oclAsType(!Library!).definedClasses).[not]() {
	classes := self.oclAsType(!Library!).definedClasses.getNewIterator();
	classes.start();
	while classes.isOn() {
		aClass := classes.item().oclAsType(!UserClass!);
		JavaCode [theBasicMtlLibrary.appendDefinedClasses((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.UserClass)BMTL_aClass.BMTL_toASTJava())];
		classes.next();
	}
	}
	properties := self.oclAsType(!ASTNode!).decoration.getNewIterator();
	properties.start();
	while properties.isOn() {
		aProperty := properties.item().oclAsType(!Property!);
		JavaCode [theBasicMtlLibrary.appendDecoration((org.irisa.triskell.MT.visitors.Java.AnalysingVisitor.Property)BMTL_aProperty.BMTL_toASTJava())];
		properties.next();
	}
	JavaCode [return theBasicMtlLibrary];
	}

	addClass(className : Standard::OrderedSet ; localClassInheritance : Standard::Bag ; refinedClasses : Standard::Set) : Standard::Void
	{
	theInheritance : Standard::Set;
	anInheritedParent : Standard::OrderedSet;
	theCreatedClass, refiner : UserClass;
	theLibName,theName,inhName : Standard::String;
	names  : Standard::Iterator;
	names := className.getNewIterator();
	names.start();
	theLibName := names.item().oclAsType(!Standard::String!); 
	names.next(); //skip the library name
	theName := names.item().oclAsType(!Standard::String!);
	names.next(); 
	theCreatedClass := new UserClass();
	theCreatedClass.isAbstract := false; //TODO find the real value of isAbstract of the inherited class
	theCreatedClass.name := theName;
	theInheritance := new Standard::Set();
	anInheritedParent := new Standard::OrderedSet();
	anInheritedParent := anInheritedParent.append(theLibName);
	anInheritedParent := anInheritedParent.append(theName);
	theInheritance := theInheritance.including(anInheritedParent);
	//keep all local inheritances in the copy of the class
	while names.isOn() {
		anInheritedParent := new Standard::OrderedSet();
		anInheritedParent := anInheritedParent.append(names.item().oclAsType(!Standard::String!));
		theInheritance := theInheritance.including(anInheritedParent);
		names.next();
	}	
	names := localClassInheritance.getNewIterator();
	while names.isOn() {
		inhName := names.item().oclAsType(!Standard::String!);
		anInheritedParent := new Standard::OrderedSet();
		//anInheritedParent := anInheritedParent.append(theLibName);
		anInheritedParent := anInheritedParent.append(inhName);
		if refinedClasses.includes(anInheritedParent) {
			refiner := findRefiningClass(inhName);
			anInheritedParent := new Standard::OrderedSet();
			anInheritedParent := anInheritedParent.append(refiner.name);
			theInheritance := theInheritance.including(anInheritedParent);
		} else {
			anInheritedParent := new Standard::OrderedSet();
			anInheritedParent := anInheritedParent.append(inhName);
			theInheritance := theInheritance.including(anInheritedParent);
		}
		names.next();
	}
	theCreatedClass.oclAsType(!ASTNode!).createNewInheritanceProperty('Inheritance',theInheritance,'InheritanceTag');
	theCreatedClass.oclAsType(!ASTNode!).createNewStringProperty('LineNumber','-100000','StringTag'); //we should have a LineNumber for ASTJava 2 code generation : -100 000 may mean generated by inheritance transformation
	self.oclAsType(!Library!).appendDefinedClasses(theCreatedClass);
	}

	isRefined(className : Standard::OrderedSet;refinedClasses : Standard::Set) : Standard::Boolean
	{
	theLibName,theClassName : Standard::String;
	refinedNames,names  : Standard::Iterator;
	aRefinedName : Standard::OrderedSet;
	names := className.getNewIterator();
	names.start();
	theLibName := names.item().oclAsType(!Standard::String!); 
	names.next();
	theClassName := names.item().oclAsType(!Standard::String!);
	refinedNames := refinedClasses.getNewIterator();
	refinedNames.start();
	while refinedNames.isOn() {
		aRefinedName := refinedNames.item().oclAsType(!Standard::OrderedSet!);
		names := aRefinedName.getNewIterator();
		names.start();
		if theLibName.[=](names.item().oclAsType(!Standard::String!))
		{	names.next();
			if theClassName.[=](names.item().oclAsType(!Standard::String!))
			{	return true; }
		}
		refinedNames.next();
		}
	 return false;
	}
	
	addLibraries(inheritance : Standard::Set; refinedClasses : Standard::Set) : Standard::Void
	{
	librariesNames,classes : Standard::Iterator;
	aLibName,aClassName : Standard::OrderedSet;
	localClassInheritance : Standard::Bag;
	inheritedClasses : Standard::Set;
	theLibraryName : Standard::String;
	JavaCode[org.irisa.triskell.MT.BasicMTL.BasicMTLTLL.Java.Library lib = null];
	librariesNames := inheritance.getNewIterator();
	librariesNames.start();
	while librariesNames.isOn() {
		aLibName := librariesNames.item().oclAsType(!Standard::OrderedSet!);
		'INHERIETD LIBRARY ADDED'.toOut();
		inheritedClasses := self.allKnownClasses(aLibName);
		if isNull(inheritedClasses) {
			'TRYING TO COLLECT CLASSES FROM TLL'.toOut();
			JavaCode [ String libNameToImport = ((BMTLStringInterface)BMTL_aLibName.getTheCollection()[0\]).getTheString()];
			JavaCode [ lib = TypeChecker.allReferedTypes.loadTLL(libNameToImport)];
			JavaCode [ if (lib == null) throw new RuntimeException("Cannot load the " + libNameToImport + " library !")];
			JavaCode [ java.util.Collection allKnownClassesCollection = TypeChecker.allReferedTypes.loadTLLAllKnownClasses(lib)];
			JavaCode [ java.util.Iterator allKnownClassesIt = allKnownClassesCollection.iterator()];
			JavaCode [ if (allKnownClassesCollection.size() > 1) BMTL_inheritedClasses = new BMTLSet()];
			JavaCode [ if (allKnownClassesIt.hasNext()) BMTL_theLibraryName = new BMTLString((String)allKnownClassesIt.next())];
			JavaCode [ while (allKnownClassesIt.hasNext()) BMTL_inheritedClasses = BMTL_inheritedClasses.BMTL_including(new BMTLOrderedSet(new Value[\]{BMTL_theLibraryName,new BMTLString((String)allKnownClassesIt.next())}))];
			}
		if isNull(inheritedClasses).[not]() {
		classes := inheritedClasses.getNewIterator();
		classes.start();
		while classes.isOn() {
			aClassName := classes.item().oclAsType(!Standard::OrderedSet!);
			if isRefined(aClassName,refinedClasses).[not]()
				{	
					JavaCode[ java.util.Iterator inhi];
					if aClassName.size() = 1 {
						JavaCode[ inhi = lib == null ? new java.util.ArrayList().iterator() : TypeChecker.allReferedTypes.getUserClassLocalInheritance(((BMTLStringInterface)BMTL_aClassName.BMTL_at(new BMTLInteger(1))).getTheString(), lib).iterator()];
					} else {
						JavaCode[ inhi = lib == null ? new java.util.ArrayList().iterator() : TypeChecker.allReferedTypes.getUserClassLocalInheritance(((BMTLStringInterface)BMTL_aClassName.BMTL_at(new BMTLInteger(2))).getTheString(), lib).iterator()];
					}
					JavaCode[ BMTL_localClassInheritance = new BMTLBag()];
					JavaCode[ while(inhi.hasNext()) BMTL_localClassInheritance = BMTL_localClassInheritance.BMTL_including(new BMTLString((String)inhi.next()));];
					'COPY SKELETON CLASS'.toOut();
					aClassName.toOut();
					' FROM IMPORTED LIBRARY.'.toOut();
					addClass(aClassName, localClassInheritance, refinedClasses); }
			classes.next();
		}
		}
		librariesNames.next();
	}
	}
	
	findRefinedClasses() : Standard::Set
	{
	properties,userClasses : Standard::Iterator;
	theSet : Standard::Set;
	aClass : UserClass;
	aProperty : Property;
	theSet:=new Standard::Set();
	userClasses := self.oclAsType(!Library!).definedClasses.getNewIterator();
	userClasses.start();
	while userClasses.isOn() {
		aClass := userClasses.item().oclAsType(!UserClass!);
		properties := aClass.oclAsType(!ASTNode!).decoration.getNewIterator();
		properties.start();
		while properties.isOn() {
			aProperty := properties.item().oclAsType(!Property!);
			if aProperty.name.[=]('Refinement')
			{
			theSet := theSet.union(aProperty.oclAsType(!InheritanceProperty!).value);
			}
			properties.next();
		}
		userClasses.next();
	}
	return theSet;
	}
	
	findRefiningClass(name : Standard::String) : UserClass {
	properties,userClasses, refinements : Standard::Iterator;
	aClass : UserClass;
	aProperty : Property;
	ref : Standard::OrderedSet;
	ok : Standard::Boolean;
	userClasses := self.oclAsType(!Library!).definedClasses.getNewIterator();
	userClasses.start();
	while userClasses.isOn() {
		aClass := userClasses.item().oclAsType(!UserClass!);
		properties := aClass.oclAsType(!ASTNode!).decoration.getNewIterator();
		properties.start();
		while properties.isOn() {
			aProperty := properties.item().oclAsType(!Property!);
			if aProperty.name.[=]('Refinement')
			{
				refinements := aProperty.oclAsType(!InheritanceProperty!).value.getNewIterator();
				while (refinements.isOn()) {
					ref := refinements.item();
					if ref.size().[=](1) {
						ok := ref.at(1).[=](name);
					} else {
						ok := ref.at(2).[=](name);
					}
					if ok {
						aClass.name.concat(' found').toOut();
						return aClass;
					}
					refinements.next();
				}
			}
			properties.next();
		}
		userClasses.next();
	}
	return null;
	}
	
	transformInheritedLibrary() : Standard::Void
	{
	refinedClasses : Standard::Set;
	properties: Standard::Iterator;
	aProperty : Property;
	refinedClasses := null;
	properties := self.oclAsType(!BasicMtlASTView!).oclAsType(!ASTNode!).decoration.getNewIterator();
	properties.start();
	while properties.isOn() {
		aProperty := properties.item().oclAsType(!Property!);
		if aProperty.name.[=]('Inheritance')
		{
		//find the declared refined classes of thislib, if not already done
		if isNull(refinedClasses)
		   {	refinedClasses := findRefinedClasses(); }	
		addLibraries(aProperty.oclAsType(!InheritanceProperty!).value,refinedClasses);
		}
		properties.next();
	}
	}

 }