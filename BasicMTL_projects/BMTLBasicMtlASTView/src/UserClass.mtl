// $Id: UserClass.mtl,v 1.3 2003-12-08 11:23:29 jpthibau Exp $
// part of the BasicMtlASTView Library ( view on ASTJava )
/* version written for basicmtl.g,v 1.2
 *	(cf /udd/triskell/cvsroot/dev/MT/BasicMtlAntlr/ANTLRParser/basicmtl.g,v 1.2)
 */
 
 library BasicMtlASTView;
 
 class UserClass extends ASTNode {
 
	definedMethods : Standard::Set;
	definedAttributes : Standard::Set;
	name : Standard::String;
	QualifiedName : Standard::OrderedSet;
	
	appendDefinedAttributes(attrib : Attribute) : Standard::Void
	{	if isNull(definedAttributes)
			{ JavaCode [BMTL_definedAttributes=new BMTLSet()]; }
		definedAttributes := definedAttributes.including(attrib).oclAsType(!Standard::Set!);
	}
	appendDefinedMethods(op : Operation) : Standard::Void
	{	if isNull(definedMethods)
			{ JavaCode [BMTL_definedMethods=new BMTLSet()]; }
		definedMethods := definedMethods.including(op).oclAsType(!Standard::Set!);
	}

	joinAttributeOperation(isGetter : Standard::Boolean;attributeName : Standard::String;operationName : Standard::String)
	//join attribute and the Getter/Setter operation
	{
	theAttribute : Attribute;
	theOperation : Operation;
	features : Standard::Iterator;
	theAttribute := null;
	theOperation := null;
	features :=  definedAttributes.getNewIterator();
	features.start();
	while features.isOn() {
		if features.item().oclAsType(!Attribute!).name.[=](attributeName)
		   { theAttribute := features.item().oclAsType(!Attribute!); }
		features.next();
	}
	features :=  definedMethods.getNewIterator();
	features.start();
	while features.isOn() {
		if features.item().oclAsType(!Operation!).name.[=](operationName)
		   { theOperation := features.item().oclAsType(!Operation!); }
		features.next();
	}
	if isNull(theAttribute).or(isNull(theOperation))
	   { 'Getter/Setter attribute or operation not found !'.toErr();
	      isGetter.toErr();
	      attributeName.toErr();
	      operationName.toErr(); }
	else {
		if isGetter {
			theAttribute.possibleGetter := theOperation;
			theOperation.isGetterFor := theAttribute;
		}
		else {
			theAttribute.possibleSetter := theOperation;
			theOperation.isSetterFor := theAttribute;
		}
	}
	}
	
	toASTJava() : ASTJava::Object
	{
	aNamePart,attributeName : Standard::String;
	anAttribute : Attribute;
	aMethod : Operation;
	aProperty : Property;
	qnames,attributes,methods,properties : Standard::Iterator;
//	inheritance : Standard::BMTLObject;
//	lineNumber : Standard::String;
	JavaCode [org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.UserClass theClass=new org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.UserClass(BMTL_name.getTheString())];
	if isNull(QualifiedName).[not]() {
	qnames := QualifiedName.getNewIterator();
	qnames.start();
	while qnames.isOn() {
		aNamePart := qnames.item().oclAsType(!Standard::String!);
		JavaCode [theClass.appendQualifiedName(BMTL_aNamePart.getTheString())];
		qnames.next();
	}
	}
	if isNull(definedAttributes).[not]() {
	attributes := definedAttributes.getNewIterator();
	attributes.start();
	while attributes.isOn() {
		anAttribute := attributes.item().oclAsType(!Attribute!);
		JavaCode [theClass.appendDefinedAttributes((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Attribute)BMTL_anAttribute.BMTL_toASTJava())];
		attributes.next();
	}
	}
	if isNull(definedMethods).[not]() {
	methods := definedMethods.getNewIterator();
	methods.start();
	while methods.isOn() {
		aMethod := methods.item().oclAsType(!Operation!);
		JavaCode [org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Operation theASTMethod=(org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Operation)BMTL_aMethod.BMTL_toASTJava()];
		JavaCode [org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Attribute theASTAttribute=null];
		JavaCode [theClass.appendDefinedMethods(theASTMethod)];
		if isNull(aMethod.isGetterFor).[not]() {
			attributeName := aMethod.isGetterFor.name;
			JavaCode [theASTAttribute = theClass.findAttribute(BMTL_attributeName.getTheString())];
			JavaCode [theASTAttribute.setGetter(theASTMethod)];
			JavaCode [theASTMethod.setIsGetterFor(theASTAttribute)];
		}
		if isNull(aMethod.isSetterFor).[not]() {
			attributeName := aMethod.isSetterFor.name;
			JavaCode [theASTAttribute = theClass.findAttribute(BMTL_attributeName.getTheString())];
			JavaCode [theASTAttribute.setSetter(theASTMethod)];
			JavaCode [theASTMethod.setIsSetterFor(theASTAttribute)];
			}
		methods.next();
	}
	}
	properties := self.oclAsType(!ASTNode!).decoration.getNewIterator();
	properties.start();
	while properties.isOn() {
		aProperty := properties.item().oclAsType(!Property!);
		JavaCode [theClass.appendDecoration((org.irisa.triskell.MT.visitors.Java.AnalysingVisitor.Property)BMTL_aProperty.BMTL_toASTJava())];
		properties.next();
	}
/*	inheritance := self.oclAsType(!ASTNode!).getProperty('Inheritance').value;
	JavaCode [theClass.createNewProperty("Inheritance",inheritance,"SpecialTag")];
	lineNumber := self.oclAsType(!ASTNode!).getProperty('lineNumber').value;
	JavaCode [theClass.createNewProperty("LineNumber",BMTL_lineNumber.getTheString(),"StringTag")];*/
	JavaCode [return theClass];
	}
 }