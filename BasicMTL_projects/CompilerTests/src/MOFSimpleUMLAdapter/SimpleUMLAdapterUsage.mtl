library SimpleUMLAdapterUsage;

model MYMOF : RepositoryModel;
model adapter    : MOFSimpleUMLAdapter;

main() : Standard::Void
{	 
	// local variables

	adapter         : MOFSimpleUMLAdapter::AdapterModelManager;
	SIMPLEUML		: Standard::RepositoryAPI;
    projectPath       : Standard::String;
	inputFilename     : Standard::String;
	outputFilename    : Standard::String;
	test : Test2;

	// we define some filenames 
	projectPath       := '';
	inputFilename     := projectPath.concat ('models/UML_model.xmi');
	outputFilename    := projectPath.concat ('models/UML_model_MODIFIED.xmi');

    // we initialize the MDR driver			
	adapter := new MOFSimpleUMLAdapter::AdapterModelManager();
	 
	// intanciate the model, save result in another file
	SIMPLEUML := adapter.getModel (
		'SimpleUML_model', 
		inputFilename,
		outputFilename
	);

	test := new Test2 ();
	test.run(SIMPLEUML);

	'End of test !'.toOut();
}

//////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////

class Test2
{
	/** */
	run ( SIMPLEUML : RepositoryModel)
	{
		iterator : Standard::Iterator;
		anAssoc : MYMOF::Model::AssociationEnd;
		instances : Standard::Set;
		associationEndType : Standard::OclType;

		MYMOF := SIMPLEUML;
		'allInstances'.toOut();
		instances := !MYMOF::Model::AssociationEnd!.allInstances();
		'allInstances passed'.toOut();
		iterator := instances.getNewIterator();
		while iterator.isOn() {
			anAssoc := iterator.item();
			anAssoc.toOut();
			iterator.next();
		}
		'NOW working with SIMPLEUML repository variable'.toOut();
		associationEndType := SIMPLEUML.getTypeFromName('Model::AssociationEnd');
		instances :=associationEndType.allInstances();
		iterator := instances.getNewIterator();
		while iterator.isOn() {
			anAssoc := iterator.item();
			anAssoc.toOut();
			iterator.next();
		}
		'allInstances passed'.toOut();
		anAssoc := SIMPLEUML.instanciate(SIMPLEUML.getTypeFromName('Model::AssociationEnd'));
		anAssoc.toOut();
	}
}
