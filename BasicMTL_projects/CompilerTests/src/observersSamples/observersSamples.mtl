library observersSamples;

class Hello
tag observable := booleantag true;
{
	msg : Standard::String;
	
	init(msg : Standard::String) {
		self.msg := msg;
	}
	
	run() : Standard::Void {
		self.msg.toOut();
	}	
}

class HelloObserver extends DefaultObservers::Observer {
}

class HelloSetObserver extends DefaultObservers::Observer {

	notifyPreSet(object : Standard::BMTLObject;attributeName : Standard::String;value : Standard::OclAny) : Standard::Boolean {
		'SET will be done'.toOut();
		object.toOut();
		attributeName.toOut();
		value.toOut();
		return true;
	}

	notifyPostSet(object : Standard::BMTLObject;attributeName : Standard::String;value : Standard::OclAny) : Standard::Void {
		'SET has been done'.toOut();
		object.toOut();
		attributeName.toOut();
		value.toOut();
	}
}

class HelloGetObserver extends DefaultObservers::Observer {

	notifyPreGet(object : Standard::BMTLObject;attributeName : Standard::String) : Standard::Boolean {
		'GET will be done'.toOut();
		object.toOut();
		attributeName.toOut();
		return true;
	}
}

class HelloDeleteObserver extends DefaultObservers::Observer {

	notifyPreDelete(object : Standard::BMTLObject) : Standard::Boolean {
		'DELETE will be done'.toOut();
		object.toOut();
		return true;
	}

	notifyPostDelete(object : Standard::BMTLObject) : Standard::Void {
		'DELETE has been done'.toOut();
		object.toOut();
	}
}

class HelloNewObserver extends DefaultObservers::Observer {

	notifyPostNew(object : Standard::BMTLObject) : Standard::Void {
		'NEW has been done'.toOut();
		object.toOut();
	}
}

main() : Standard::Void	{
	hw : Hello;
	instances : Standard::Set;
	obs : HelloObserver;
	setObs : HelloSetObserver;
	getObs : HelloGetObserver;
	deleteObs : HelloDeleteObserver;
	newObs : HelloNewObserver;
	//DEFAULT
	//*******
	hw := new Hello();
	obs := new HelloObserver();
	hw.addPreObserver(obs,'S');
	hw.addPostObserver(obs,'S');
	hw.init('Hello.');
	hw.run();
	hw.removePreObserver(obs,'S');
	hw.removePostObserver(obs,'S');
	self.addPreObserver(obs,!observersSamples::Hello!,'S');
	self.addPostObserver(obs,!observersSamples::Hello!,'S');
	hw.init('Hi !');
	hw.run();
	self.removePreObserver(obs,!observersSamples::Hello!,'S');
	self.removePostObserver(obs,!observersSamples::Hello!,'S');
	//SETTER
	//******
	setObs := new HelloSetObserver();
	hw.addPreObserver(setObs,'S');
	hw.addPostObserver(setObs,'S');
	self.addPostObserver(setObs,!observersSamples::Hello!,'S');
	hw.init('HELLO !!!');
	hw.run();
	hw.removePreObserver(setObs,'S');
	hw.removePostObserver(setObs,'S');
	self.removePostObserver(setObs,!observersSamples::Hello!,'S');
	//GETTER
	//******
	getObs := new HelloGetObserver();
	hw.addPreObserver(getObs,'G');
	self.addPreObserver(getObs,!observersSamples::Hello!,'G');
	hw.init('Hi Getter !!!');
	hw.run();
	hw.msg.toOut();
	hw.removePreObserver(getObs,'G');
	self.removePreObserver(getObs,!observersSamples::Hello!,'G');
	//DELETE
	//******
	deleteObs := new HelloDeleteObserver();
	hw.addPreObserver(deleteObs,'D');
	self.addPostObserver(deleteObs,!observersSamples::Hello!,'D');
	hw.delete();
	self.removePostObserver(deleteObs,!observersSamples::Hello!,'D');
	//NEW
	//***
	hw := new Hello();
	instances := !observersSamples::Hello!.allInstances();
	instances.toOut();
	newObs := new HelloNewObserver();
//	self.addPreObserver(newObs,!observersSamples::Hello!,'N');
	self.addPostObserver(newObs,!observersSamples::Hello!,'N');
	hw := new Hello();
}
