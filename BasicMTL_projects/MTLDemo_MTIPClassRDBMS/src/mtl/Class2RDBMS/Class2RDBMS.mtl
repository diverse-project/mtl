/******************************************************************************
 * $Id: Class2RDBMS.mtl,v 1.2 2005-08-03 14:41:39 dvojtise Exp $
 * Repository independent transformations that apply to SimpleUML models
 *	includes : 
 *		association 2 attributes 
 *
 ******************************************************************************/


library Class2RDBMS;

//-- Lib local models --
//Repository models
model source_model : RepositoryModel;		// must be conform to SimpleUML MetaModel
model target_model : RepositoryModel;		// must be conform to RDBMS MetaModel
	// Note: the possibility to store the result into file other than the input file is handled by the driver itself
	//		and thus is not visible here


class Class2RDBMSTransfo
{ 
	/**
	  * Connects the input model to this library for future use
	  */
	initmodel( a_source_model, a_target_model:RepositoryModel )
	{
	 	'Associations2Attributes.initmodels()'.toOut();
		source_model := a_source_model;
		target_model := a_target_model;
	}
	
	
	/******************************************** 
	 * PrettyPrint Input Model
	 ********************************************/
	classModelToString() : Standard::String
	{
		result 			: Standard::String;
		visitor0 		: ClassVisitor;
		visitor1 		: Class2RDBMSPass1Visitor;
		visitor2 		: Class2RDBMSPass2Visitor;
		aVisitorResult  : VisitorResult;
		aVisitorResultString  : Standard::String;
		classifierSet 	: Standard::Set;
		associationSet 	: Standard::Set;
		topLevelIterator: Standard::Iterator;
		aClassifier 	: source_model::Classifier;
		anAssociation 	: source_model::Association;
		trace			: HashTable;
		
		trace := new HashTable();
		trace.init();
		visitor0 := new ToStringClassVisitor();
		visitor0.init(new ToStringVisitorResultFactory());
		visitor1 := new Class2RDBMSPass1Visitor();
		visitor1.init(new VisitorResultFactory());
		visitor1.initTrace(trace);
		visitor2 := new Class2RDBMSPass2Visitor();
		visitor2.init(new VisitorResultFactory());
		visitor2.initTrace(trace);
		
		// we prepare a string for full display
		result := '';
	/*	
		classifierSet := !source_model::Classifier!.allInstances();
		topLevelIterator := classifierSet.getNewIterator();
		while (topLevelIterator.isOn())
		{
			aClassifier := topLevelIterator.item().oclAsType(!source_model::Classifier!);
			aVisitorResult := aClassifier.accept (visitor1, '');	
			aVisitorResultString := aVisitorResult.toString();
			result := result.concat (aVisitorResultString);
			topLevelIterator.next ();
		}
		*/
		
		
		/* pass 1, creates all toplevel table from persitent classes
		it takjes care of inheritance
		*/
		callVisitorOnTopElements(visitor1);
	/*	classifierSet := !source_model::Classifier!.allInstances();
		topLevelIterator := classifierSet.getNewIterator();
		while (topLevelIterator.isOn())
		{
			aClassifier := topLevelIterator.item().oclAsType(!source_model::Classifier!);
			aClassifier.accept (visitor1, '');	
			topLevelIterator.next ();
			'1 topLevel Classifier done'.toOut();
		}*/
		
		/* pass 2, 
		*/	
		callVisitorOnTopElements(visitor2);
/*		classifierSet := !source_model::Classifier!.allInstances();
		topLevelIterator := classifierSet.getNewIterator();
		while (topLevelIterator.isOn())
		{
			aClassifier := topLevelIterator.item().oclAsType(!source_model::Classifier!);
			aClassifier.accept (visitor2, '');	
			topLevelIterator.next ();
			'1 topLevel Classifier done'.toOut();
		}	
			
			*/					
		return result;
	}
	callVisitorOnTopElements(visitor 		: ClassVisitor)
	{
		
		classifierSet 	: Standard::Set;
		topLevelIterator: Standard::Iterator;
		aClassifier 	: source_model::Classifier;
		
		classifierSet := !source_model::Classifier!.allInstances();
		topLevelIterator := classifierSet.getNewIterator();
		while (topLevelIterator.isOn())
		{
			aClassifier := topLevelIterator.item().oclAsType(!source_model::Classifier!);
			aClassifier.accept (visitor, '');	
			topLevelIterator.next ();
		}
	}
}

