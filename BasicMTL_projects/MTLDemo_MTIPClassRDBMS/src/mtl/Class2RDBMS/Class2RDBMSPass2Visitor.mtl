/************************************************
***   $Id: Class2RDBMSPass2Visitor.mtl,v 1.2 2005-08-03 16:34:40 dvojtise Exp $
***   File : ToStringClassVisitor.mtl
***   Library : Visitors
***   Version : 0.1 
***   Author :dvojtise
***   Date : August 1, 2005 10:09:17 AM CEST
*************************************************/

library Class2RDBMS;

/** */
class Class2RDBMSPass2VisitorResultFactory extends VisitorResultFactory
{
	create () : VisitorResult
	{
		return new TostringVisitorResult().init ();
	}
}

/** */ 
class Class2RDBMSPass2Visitor extends ClassVisitor
{
	classHelper 		: ClassHelper;
	class2RDBMSHelper 	: Class2RDBMSHelper;
	trace    			: HashTable;
		
	/** */
	initTrace (theTrace    : HashTable) : Class2RDBMSPass2Visitor 
	{
		trace := theTrace;
		classHelper := new ClassHelper();
		class2RDBMSHelper := new Class2RDBMSHelper().init(trace);
		return this;
	}
	
	
	/** */
	visitClass (instance : Standard::OclAny; context : Standard::OclAny) : Standard::OclAny
	{
		theClass : source_model::Class;
		result   : VisitorResult;
		str      : Standard::String;
		
		theTable : target_model::Table;
		
		// we create a new visitor result
		result := this.resultFactory.create ();

		// we retrieve the called object
		theClass := instance.oclAsType (!source_model::Class!);
		
		'Class2RDBMSPass2Visitor visiting Class'.toOut();
		
		
		this.oclAsType(!ClassVisitor!).visitClass(instance, instance);	
		return result;				
	}
	
	
	/**	*/	
	visitAttribute (instance : Standard::OclAny; context : Standard::OclAny) : Standard::OclAny
	{
		theAttribute: source_model::Attribute;		
		theClass : source_model::Class;
		theTable : target_model::Table;
		
		
		result : VisitorResult;
		theColumn : target_model::Column;

		// we create the result
		result := this.resultFactory.create ();

		// we retrieve the called object
		theAttribute := instance.oclAsType (!source_model::Attribute!);
		'Class2RDBMSPass2Visitor visiting Attribute'.toOut();
		
		// we retreive Class from context
		theClass := context.oclAsType (!source_model::Class!);
		theTable := trace.exists(theClass).oclAsType (!target_model::Table!);
		
		
		
		
		// we call the parent
		this.oclAsType(!ClassVisitor!).visitAttribute(instance, null);
		return result;
	}
	
	/**	*/	
	visitAssociation (instance : Standard::OclAny; context : Standard::OclAny) : Standard::OclAny
	{
				theAssociation	: source_model::Association;
		srcClass		: source_model::Class;
		destClass		: source_model::Class;
		theTable 		: target_model::Table;		
		theColumn 		: target_model::Column;
		anAttribute		: source_model::Attribute;
		result 			: VisitorResult;
		attIterator 	: Standard::Iterator;
		newPrefix 		: Standard::String;
		sourceItemIt	: Standard::Iterator;
		item			: ClassAndPathItem;
		
		asourceClass	: source_model::Class;
		
		

		// we create the result
		result := this.resultFactory.create ();

		// we retrieve the called object
		theAssociation := instance.oclAsType (!source_model::Association!);
		'Class2RDBMSPass1Visitor visiting Association'.toOut();
		
		// the classes for this assoc
		srcClass := theAssociation.src;
		destClass := theAssociation.dest;
		
		
		
		// for each of the dest which are non persistent we must consider it as part of this class 
		// and then create primary key in this class table with a special rule
			// create a column for each of the primary keys (all primary attributes) of the dest class
		/*if classHelper.isClassPersistent(srcClass) and classHelper.isClassPersistent(destClass)
		{			
			theTable := trace.exists(srcClass).oclAsType (!target_model::Table!);
			newPrefix := theAssociation.name.oclAsType(!Standard::String!);
			newPrefix := newPrefix.concat('_');
			class2RDBMSHelper.createFColumnsForNonPersistentClass(destClass, theTable, newPrefix);
		}*/
		/* deal with long chain of not persistent classes between two persistent classes */
		if classHelper.isClassPersistent(srcClass) 
		{
			'********1*********'.toOut();
			// we need to retreive the sources classes and create foreign keys for them
			sourceItemIt := classHelper.getPersistentSourcesAndPath(srcClass).getNewIterator();
			'********2*********'.toOut();
			while sourceItemIt.isOn()
			{
				'********3*********'.toOut();
				item := sourceItemIt.item().oclAsType(!ClassAndPathItem!);
				'********4*********'.toOut();
				asourceClass := item.modelClass.oclAsType(!source_model::Class!);
				theTable := trace.exists(asourceClass).oclAsType (!target_model::Table!);
				newPrefix := item.path.oclAsType(!Standard::String!);
				class2RDBMSHelper.createFColumnsForNonPersistentClass(srcClass, theTable, newPrefix);
				sourceItemIt.next();
			}
			'********5*********'.toOut();
		}
		
		return result;
	}
}