/************************************************
***   $Id: ClassHelper.mtl,v 1.2 2005-08-03 16:34:35 dvojtise Exp $
***   File : ClassHelper.mtl
***   Library : Class2RDBMS
***   Version : 0.1 
***   Author :dvojtise
***   Date : August 2, 2005 4:51:26 PM CEST
*************************************************/

library Class2RDBMS;

class ClassHelper
{
	
	/** a class is persitent according to its topmost parent persistent status*/
	isClassPersistent(theClass : source_model::Class) : Standard::Boolean
	{
		
		if isNull(theClass.parent)
		{ 
			return theClass.is_persistent;
		}
		else
		{
			return isClassPersistent(theClass.parent.oclAsType(!source_model::Class!));
		}
		
	}
	
	
	isPrimitive(theClassifier : Standard::OclAny ) : Standard::Boolean
	{
		return theClassifier.oclIsKindOf(!source_model::PrimitiveDataType!);
		
	}
	
	/** return the top parent or itself */
	getTopParent(theClass : source_model::Class) : source_model::Class
	{
		if isNull(theClass.parent)
		{
			return theClass;
		}
		else
		{
			return getTopParent(theClass.parent.oclAsType(!source_model::Class!));
		}
	}
	
	getDestAssoc(theClass : source_model::Class) : Standard::Set
	{
		assocIterator : Standard::Iterator;
		result : Standard::Set;
		anAssociation : source_model::Association;
		
		result := new Standard::Set();
		assocIterator := !source_model::Association!.allInstances().getNewIterator();
		while (assocIterator.isOn())
		{
			anAssociation := assocIterator.item().oclAsType (!source_model::Association!);
			if( anAssociation.src.[=](theClass))
			{	result:= result.including(anAssociation);
			}
			assocIterator.next();
		}
		return result;
	}
	
	/* retreives all the opersistent classes that are source of this class */
	getPersistentSourcesAndPath(theClass : source_model::Class) : Standard::Set
	{
		result : Standard::Set;
		result := new Standard::Set();
		result := getPersistentSourcesAndPathRecursive(theClass, result, '');
		return result;
	}
	getPersistentSourcesAndPathRecursive(theClass : source_model::Class; result : Standard::Set; currentPath : Standard::String) : Standard::Set
	{
		assocIterator 	: Standard::Iterator;
		anAssociation 	: source_model::Association;
		item			: ClassAndPathItem;
		newPath			: Standard::String;
		
		'   1 getPersistentSourcesAndPathRecursive'.toOut();
		assocIterator := !source_model::Association!.allInstances().getNewIterator();
		while (assocIterator.isOn())
		{
			anAssociation := assocIterator.item().oclAsType (!source_model::Association!);
			'   2 getPersistentSourcesAndPathRecursive'.toOut();
			if( anAssociation.dest.[=](theClass))
			{	
				'   2b getPersistentSourcesAndPathRecursive'.toOut();
				newPath := anAssociation.name.oclAsType(!Standard::String!).concat('_');
				newPath :=  newPath.concat(currentPath);
				'   3 getPersistentSourcesAndPathRecursive'.toOut();
				// this assoc imply this class as dest
				// let's look to the src
				if isClassPersistent(anAssociation.src.oclAsType(!source_model::Class!))
				{
					
					'   4 getPersistentSourcesAndPathRecursive'.toOut();
					item := new ClassAndPathItem();
					item.modelClass := anAssociation.src.oclAsType(!source_model::Class!);
					item.path := newPath;
					result := result.including(item);
				}
				else
				{
					
					'   4b getPersistentSourcesAndPathRecursive'.toOut();
					// recursive
					result := getPersistentSourcesAndPathRecursive(anAssociation.src.oclAsType(!source_model::Class!), result, newPath);
				}
			}
			'   2end getPersistentSourcesAndPathRecursive'.toOut();
			assocIterator.next();
		}
		return result;
	}

}

class ClassAndPathItem
{
	modelClass   : source_model::Class;
	path : Standard::String;
}