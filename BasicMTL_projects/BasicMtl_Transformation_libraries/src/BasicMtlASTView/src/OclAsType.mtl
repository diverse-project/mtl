// $Id: OclAsType.mtl,v 1.1 2003-09-17 07:31:05 jpthibau Exp $
// part of the BasicMtlASTView Library ( view on ASTJava )
/* version written for basicmtl.g,v 1.2
 *	(cf /udd/triskell/cvsroot/dev/MT/BasicMtlAntlr/ANTLRParser/basicmtl.g,v 1.2)
 */
 
 library BasicMtlASTView;
 
 class OclAsType extends Expression {
 
	expression : Expression;
	type : Standard::OrderedSet;
 
	appendType(name : Standard::String) : Standard::Void
	{	if isNull(type)
			{ JavaCode [BMTL_type=new BMTLOrderedSet()]; }
		type := type.append(name).oclAsType(!Standard::OrderedSet!);
	}

	toASTJava() : ASTJava::Object
	{
	theArguments,properties : Standard::Iterator;
	anArgument : Standard::String;
	aProperty : Property;
	JavaCode [org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.OclAsType theOclAsType=new org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.OclAsType()];
	theArguments := type.getNewIterator();
	theArguments.start();
	while theArguments.isOn() {
		anArgument := theArguments.item().oclAsType(!Standard::String!);
		JavaCode [theOclAsType.appendType(BMTL_anArgument.getTheString())];
		theArguments.next();
	}
	JavaCode [theOclAsType.setExpression((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Expression)BMTL_expression.BMTL_toASTJava())];
	properties := self.oclAsType(!ASTNode!).decoration.getNewIterator();
	properties.start();
	while properties.isOn() {
		aProperty := properties.item().oclAsType(!Property!);
		JavaCode [theOclAsType.appendDecoration((org.irisa.triskell.MT.visitors.Java.AnalysingVisitor.Property)BMTL_aProperty.BMTL_toASTJava())];
		properties.next();
	}
	JavaCode [return theOclAsType];
	}
}