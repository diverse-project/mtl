// $Id: UserClass.mtl,v 1.2 2003-09-23 17:11:13 ffondeme Exp $
// part of the BasicMtlASTView Library ( view on ASTJava )
/* version written for basicmtl.g,v 1.2
 *	(cf /udd/triskell/cvsroot/dev/MT/BasicMtlAntlr/ANTLRParser/basicmtl.g,v 1.2)
 */
 
 library BasicMtlASTView;
 
 class UserClass extends ASTNode {
 
	definedMethods : Standard::Set;
	definedAttributes : Standard::Set;
//	parentClasses : Standard::Set;
	name : Standard::String;
//	QualifiedName : Standard::OrderedSet;
	
	appendDefinedAttributes(attrib : Attribute) : Standard::Void
	{	if isNull(definedAttributes)
			{ JavaCode [BMTL_definedAttributes=new BMTLSet()]; }
		definedAttributes := definedAttributes.including(attrib);
	}
	appendDefinedMethods(op : Operation) : Standard::Void
	{	if isNull(definedMethods)
			{ JavaCode [BMTL_definedMethods=new BMTLSet()]; }
		definedMethods := definedMethods.including(op);
	}

	toASTJava() : ASTJava::Object
	{
	anAttribute : Attribute;
	aMethod : Operation;
	aProperty : Property;
	attributes,methods,properties : Standard::Iterator;
//	inheritance : Standard::BMTLObject;
//	lineNumber : Standard::String;
	JavaCode [org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.UserClass theClass=new org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.UserClass(BMTL_name.getTheString())];
	if isNull(definedAttributes).not() {
	attributes := definedAttributes.getNewIterator();
	attributes.start();
	while attributes.isOn() {
		anAttribute := attributes.item().oclAsType(!Attribute!);
		JavaCode [theClass.appendDefinedAttributes((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Attribute)BMTL_anAttribute.BMTL_toASTJava())];
		attributes.next();
	}
	}
	if isNull(definedMethods).not() {
	methods := definedMethods.getNewIterator();
	methods.start();
	while methods.isOn() {
		aMethod := methods.item().oclAsType(!Operation!);
		JavaCode [theClass.appendDefinedMethods((org.irisa.triskell.MT.BasicMTL.BasicMTLAST.Java.Operation)BMTL_aMethod.BMTL_toASTJava())];
		methods.next();
	}
	}
	properties := self.oclAsType(!ASTNode!).decoration.getNewIterator();
	properties.start();
	while properties.isOn() {
		aProperty := properties.item().oclAsType(!Property!);
		JavaCode [theClass.appendDecoration((org.irisa.triskell.MT.visitors.Java.AnalysingVisitor.Property)BMTL_aProperty.BMTL_toASTJava())];
		properties.next();
	}
/*	inheritance := self.oclAsType(!ASTNode!).getProperty('Inheritance').value;
	JavaCode [theClass.createNewProperty("Inheritance",inheritance,"SpecialTag")];
	lineNumber := self.oclAsType(!ASTNode!).getProperty('lineNumber').value;
	JavaCode [theClass.createNewProperty("LineNumber",BMTL_lineNumber.getTheString(),"StringTag")];*/
	JavaCode [return theClass];
	}
 }