library testVehicules;

/********************************************/
// Entry point operation : main
/********************************************/

main():Standard::Void
{
	vehicule : vehiculeLib::vehicule;
	o : Standard::OclAny;
	t : Standard::OclType;
	m : Standard::ModelElement;
	r : Standard::Real;
	i : Standard::Integer;
	s : Standard::String;
	
	vehicule := new vehiculeLib::vehicule();
	vehicule.vitessemaxi := 250;
	vehicule.passagers := 5;
	vehicule.vitessemaxi := vehicule.passagers;
	
	o := vehicule;
	
	if 'toto'.[=]('tutu') {
		throws 'OclAny.=(OclAny) has problems';
	}
	if vehicule.[<>](vehicule) {
		throws 'OclAny.<>(OclAny) has problems';
	}
	if vehicule.oclIsUndefined() {
		throws 'OclAny.oclIsUndefined() has problems';
	}
	if vehicule.oclIsTypeOf(!vehiculeLib::vehicule!).not() {
		throws 'OclAny.oclIsTypeOf(OclType) has problems';
	}
	if vehicule.oclIsKindOf(!vehiculeLib::vehicule!).not() {
		throws 'OclAny.oclIsTypeOf(OclType) has problems';
	}
	
	t := !vehiculeLib::vehicule!;
	
	if t.allInstances().size().[=](0) {
		throws 'OclType.oclIsTypeOf(OclType) has problems';
	}
	if t.oclQualifiedName().at(0).[<>]('vehiculeLib') {
		throws 'OclType.oclQualifiedName() has problems';
	}
	if t.oclName().[<>]('vehicule') {
		throws 'OclType.oclName() has problems';
	}
	
	m := null;
	
	m.delete();
	m.oclUid();

	r := -0.1;
	
	if r.[-]().[<>](0.1) {
		throws 'Real.-() has problems';
	}
	if r.[+](1.5).[<>](1.4) {
		throws 'Real.+(Real) has problems';
	}
	if r.[-](1.5).[<>](1.6) {
		throws 'Real.-(Real) has problems';
	}
	if r.[*](1.5).[<>](-0.15) {
		throws 'Real.*(Real) has problems';
	}
	if r.[/](1.5).[<>](-0.06666666666666666666666666666666666666666666) {
		throws 'Real./(Real) has problems';
	}
	if r.abs().[<>](0.1) {
		throws 'Real.abs() has problems';
	}
	if r.floor().[<>](-1) {
		throws 'Real.floor() has problems';
	}
	if r.round().[<>](0) {
		throws 'Real.round() has problems';
	}
	if r.max(-1.9).[<>](-0.1) {
		throws 'Real.abs() has problems';
	}
	if r.min(-1.9).[<>](-1.9) {
		throws 'Real.abs() has problems';
	}
	if r.[<](-1.9) {
		throws 'Real.<(Real) has problems';
	}
	if r.[>](-1.9).not() {
		throws 'Real.>(Real) has problems';
	}
	if r.[<=](-1.9) {
		throws 'Real.<=(Real) has problems';
	}
	if r.[>=](-1.9).not() {
		throws 'Real.>=(Real) has problems';
	}
	if r.toString().[<>]('-1.9') {
		throws 'Real.toString() has problems';
	}
	
	i := -12;
	
	if i.[-]().[<>](12) {
		throws 'Integer.-() has problems';
	}
	if i.[+](3).[<>](-9) {
		throws 'Integer.+(Integer) has problems';
	}
	if i.[-](3).[<>](-15) {
		throws 'Integer.-(Integer) has problems';
	}
	if i.[*](3).[<>](-36) {
		throws 'Integer.*(Integer) has problems';
	}
	if i.[/](3).[<>](-4) {
		throws 'Real./(Real) has problems';
	}
	if i.abs().[<>](12) {
		throws 'Integer.abs() has problems';
	}
	if i.[div](5).[<>](-2) {
		throws 'Integer.div(Integer) has problems';
	}
	if i.mod(5).[<>](-3) {
		throws 'Integer.mod(Integer) has problems';
	}
	if i.max(5).[<>](5) {
		throws 'Integer.max(Integer) has problems';
	}
	if i.min(5).[<>](-12) {
		throws 'Integer.min(Integer) has problems';
	}
	
	s := 'toto';
	
	if s.size().[<>](4) {
		throws 'String.size() has problems.';
	}
	if s.concat('tutu').[<>]('tototutu') {
		throws 'String.concat(String) has problems.';
	}
	if s.substring(2,4).[<>]('oto') {
		throws 'String.substring(Integer, Integer) has problems.';
	}
	if '123'.toInteger().[<>](123) {
		throws 'String.toInteger() has problems.';
	}
	if '123.456'.toReal().[<>](123.456) {
		throws 'String.toReal() has problems.';
	}
}

toto(arg0 : Standard::String; arg1 : vehiculeLib::vehicule) {}