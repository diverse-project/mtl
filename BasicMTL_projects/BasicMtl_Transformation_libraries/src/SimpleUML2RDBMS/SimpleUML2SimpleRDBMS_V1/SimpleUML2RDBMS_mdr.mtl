/*
 * $Id: SimpleUML2RDBMS_mdr.mtl,v 1.3 2003-08-25 09:39:00 dvojtise Exp $
 *
 * version written for BasicMtl 1.1
 *	(cf /udd/triskell/cvsroot/dev/MT/BasicMtlAntlr/src/ANTLRParser/basicmtl.g,v 1.1)
 * specific version that use mdr and the generic SimpleUML 2 RDBMS
 */

library SimpleUML2SimpleRDBMS_MDR;
// no extends for this lib
 
// Use of other libs : this not needed anymore : for information only
// use lang.Standard
// 
// use RepositoryDriver.MDRdriver		// this is a native lib that provides an access  to a driver
									// this driver allows to instantiate, load models, either with
									// methods with a lot of parameter, or opening a GUI

// Lib local model
model source_model : RepositoryModel;		// should be SimpleUML MetaModel
model target_model : RepositoryModel;		// must be SimpleRDBMS MetaModel
// they are not typed so this implies that any access to them will be done through "invoke"

// Typed model 
model SUML2RDBMS_transform_lib : SimpleUML2SimpleRDBMS;

model mdrdriver : MDRDriver;

// Library level methods
// ---------------------
// Note : should be put into a class which name is the same as the library ? NO

// Library contructors
// -------------------
/********************************************/
// Entry point operation : main
/********************************************/

main():Standard::Void
{
	
	mdrdriver := new MDRDriver();
	//mdrdriver.GetDriverInstance();
	mdrdriver.init();
	
	// intanciate the source model
	/*
	source_model := mdrdriver.getModel(null, 
							  new mdrdriver::XmiMetamodel('ThirdParty/MDR/Test/models/SimpleUML_MM.xml'), 
							  'source_model', 
							  new mdrdriver::XmiModel('ThirdParty/MDR/Test/models/testModel4SimpleUML.xml', 
							  mdrdriver.XmiModel.Read));
							 */
	source_model := mdrdriver.getModelFromXMI('SimpleUMLMM_MOF.xml', 
						'SimpleUML_source_model', 
						'SimpleUML_FullExample.xml', 'SimpleUML_source_model.xml' )
	// or this kind !!! source_model := mdrdriver.GUIGetModel('select your Source Model')
	// create the target model
	/*
	target_model := mdrdriver.getModel(null, 
							  new mdrdriver::XmiMetamodel('ThirdParty/MDR/Test/models/SimpleRDBMS_MM.xml'), 
							  'target_model', 
							  new mdrdriver::XmiModel('ThirdParty/MDR/Test/models/resultModel4SimpleRDBMS.xml', 
							  mdrdriver.XmiModel.Write));
	*/
	target_model := mdrdriver.getModelFromXMI('SimpleRDBMS_MM.xml', 
						'SimpleRDBMS_source_model', 
						'SimpleRDBMS_FullExample.xml', 'SimpleRDBMS_FullExample.xml' )
					// note : if the model xmi file is empty or doesn't exist, it create an empty model
					// the xmi file name is then used to save the model at the end of the transformation
	// or this kind !!! target_model := mdrdriver.GUIGetModel("select your target Model")
	
	// instanciate transformation lib
	SUML2RDBMS_transform_lib := (new SimpleUML2SimpleRDBMS).init(source_model, target_model);
	
	// Start the transformation
	// ou ? call SUML2RDBMS_transform_lib::transform()
	SUML2RDBMS_transform_lib.UMLToRDBMS();
	

}

