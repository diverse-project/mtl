/**
 * $Id $
 *
 *	This library defines the behaviour for the SimpleUML view to connect to a RDBMS repository
 *
 * version written for BasicMtl 1.1
 *	(cf /udd/triskell/cvsroot/dev/MT/BasicMtlAntlr/src/ANTLRParser/basicmtl.g,v 1.1)
 * 
 * Last modification by : $Author $
 * Authors : dvojtise
 *
 */
 

 
model rdbms;  // should be a  SimpleRDBMS model throught the repository


model UML2RDBMSlib is SimpleUML2SimpleRDBMS;   // tool lib for loading the existing rdbms in the uml structure
  
library RDBMS_adaptor_4_SimpleUml extends SimpleUml;
 
 
creation make(a_rdbms_model : Model)
{
	// keep this model as the repository
	rdbms = a_rdbms_model;
	
	// set all internal data by transforming the current rdbms to simpleUML
	UML2RDBMSlib = SimpleUML2simpleRDBMS.make(this , a_rdbms_model); // give the current lib as the SimpleUML !
    UML2RDBMSlib.RDBSM2SimpleUML();

	// this doesn't work because :
	//		simpleuml2rdbms use the associate instruction which has currently no meanings for a bmtl lib ! (only on the repository)
	//		this lib doesn't know about the rdbms_related_set that should be set correctly while transforming
	// TO DO rewrite this RDBSM2SimpleUML transformation directly in this adapter !
}
 
class ModelElement
{
	kind : Standard::string;
	name : Standard::string;
	
	// additional structures needed by the transformation
	// this is mainly needed becausewe cannot be sure that the needed information is available when we try to
	// change some other info.
	// this may be viewed as a basic tracability mechanism => could we use a more complex but standard tracability mecanism instead ?
	rdbms_related_me_set : Standard::Set;  // Model element from the rdbms side that are related to this simple uml model element
		
	creation make()
	{
		// TO DO ???		
	}
	
	// overwrite the standard get and setter for the attribute in order to do the job on the RDBMS repository
	set_kind(newKind : Standard::string)
	{ 
		rdbms_me : rdbms::ModelElement;
		rdbms_related_iterator : Standard::Iterator;
		
		
		/* Do nothing condition */
		// should we have a do nothing condition for attribute setter ? it makes sense for association reification but for the attributes ?
		 
		if rdbms_related_me_set.size().=(0)
		{
			// store on the UML side
			kind = newKind;
		}
		else
		{
			// store on the RDBMS side
				//find the element on the rdms side
			rdbms_me = retreive_related();
			rdbms_me.kind = kind;
		}
	}
	
	get_kind() : Standard::string
	{	
		// if there is no related (0) this  may be because this is a non persistent class 
		// so return the duplicated string
		if rdbms_related_me_set.size().=(0)
		{
			return (kind);
		}
		else
		{		
			return (retreive_related().kind);
		}	
		// PB if the user get the kind string and modify it is no longer the same as the rdmbs side string !!!
		// => an information should be present only once on the repository side
	}
	
	set_name(newName : Standard::string)
	{
		rdbms_me : rdbms::ModelElement;
		rdbms_related_iterator : Standard::Iterator;
		
		if rdbms_related_me_set.size().=(0)
		{
			// store on the UML side
			name = newName;
		}
		else
		{
			// store on the RDBMS side
				//find the element on the rdms side
			rdbms_me = retreive_related();
			rdbms_me.kind = kind;
		}
	}
	get_name() : Standard::string
	{
		// if there is no related (0) this  may be because this is a non persistent class 
		// so return the duplicated string
		if rdbms_related_me_set.size().=(0)
		{
			return (name);
		}
		else
		{		
			return (retreive_related().name);
		}
	}
	
	
	// internal methods : should be private in a language that support it
	retrieve_related() : rdbms::ModelElement
	{
		//find the element on the rdms side
		if rdbms_related_me_set.size().=(1)
		{
			rdbms_related_iterator = rdbms_related_me_set.get_new_iterator();
			rdbms_related_iterator.start();
			return ( rdbms_related_iterator.item());
		}
		else
		{
			throw new Standard::Exception.make('there is no rdbms element or there is more than one rdbms element is associated to this simpleuml modelelemnt');
		}
	}
}

class Classifier
{
	// set_Attribute : should not be done here as its behaviour changes depending on the concret Classifier : Class or PrimitiveDataType
	// get_Attribute : simply use the standard version : nothing to specify here	
}

class Class // extend SimpleUml::Class
{
	// creation make()
	// {
		// when creating a class, create a table
		// TO DO PB, what about if it create only if persistent, the repository MM loose information !
		//    and teh the transfo cannot continue because the transfo may access these objects during the transformation 
		//    however, this may be forgotten at the end because waht we want is to transform RDBMS and not uml
		//		this implies keeping 'real' associations in the view/adaptor		
	// }
	
	// overwrite the standard get and setter for the associations in order to do the job on the RDBMS repository
	set_attribute( anAttributeSet : Standard::Set)
	{
		new_attribute_it, attribute_it : Standard::Iterator;
		
		
		/* Do nothing condition */
		if 	attribute.includesAll(anAttributeSet).and(anAttributeSet.includesAll(attribute))
		{
			return();
		}
		
		// what should we do with a new set ?
		//	remove all previous attribute from the set and refill it ? NO !
		//  make a kind of diff between the previous and the new set contents 
			// reify the association : should be easier with association syntax in MTL ...
		// for each new attribute in the set	
			new_attribute_it = anAttributeSet.get_new_iterator();
			new_attribute_it.start();
			while new_attribute_it.is_off().not()
			{
				if attribute.includes(new_attribute_it.item()).not()
				{
					new_attribute_it.item().owner = this;
					// Note : use the standard setter of Attribute
					// Note2: how to be sure we won't have a loop here (ie. set_owner calling this methods )
				}
				new_attribute_it.next();
			}
			
		// for each removed attribute in the set
			attribute_it = attribute.get_new_iterator();
			attribute_it.start();
			while attribute_it.is_off().not()
			{
				if anAttributeSet.includes(attribute_it.item()).not()
				{	// this test should not be usefull ...?!
					if attribute_it.item().owner.=(this)
					{
						attribute_it.item().owner = Standard::Void;
					}
				}
				attribute_it.next();
			}
	}
	// get_attribute : nothing special with the get, simply use the standard one.
	
	
	
	// eventual associations or members from parents
	
	//		associations or members from Classifier
	set_Attribute( anAttributeSet : Standard::Set)
	{
		/* Do nothing condition */
		if 	attribute.includesAll(anAttributeSet).and(anAttributeSet.includesAll(attribute))
		{
			return();
		}
		
		// TO DO	
		// what should we do with a new set ?
		//	remove all previous attribute from the set
		//  make a kind of diff between the previous and the new set contents ?	
		
	}
	// get_Attribute : nothing special with the get, simply use the standard one.
	
	// 		associations or members from ModelElement
	set_kind(aKindString : Standard::String)
	{	
		/* Do nothing condition */
		if kind.<>(aKindString)
		{
			// if was persistent => non persistent
			if( rdbms_related_me_set.size().=(1) )
			{
				unset_related();
			}
			else
			{ // was not persistent => persitent
				// set the related with available info
				create_related();
			}			
			// call the inherited method
			this.oclAsType(ModelElement).set_kind(aKindString);
		}
	}
	set_name(newName : Standard::string)
	{	// this must be specialized as name must be put in 2 places : table.name and key.name
		rdbms_me : rdbms::ModelElement;
		rdbms_related_iterator : Standard::Iterator;
		
		if rdbms_related_me_set.size().=(0)
		{
			// store on the UML side
			name = newName;
		}
		else
		{
			// store on the RDBMS side
				//find the element on the rdms side
			rdbms_me = retreive_related();
			rdbms_me.name = newName;
			rdbms_me.key
		}
	}
	
	delete()
	{
		// TO DO
	}
	
	// 
	create_related()
	{
		aTable : target_model::Table;
		asClassifier : Classifier;
		aKey : target_model::Key;
		
		aTable = new rdbms::Table();
		
		// this table is related to this class
		rdbms_related_me_set = rdbms_related_me_set.including(aTable);
		
		// other objects that must be created with the table
		aKey = new rdbms::Key();
		aKey.name = name;
		associate (owner = aTable,  key = aKey);
		
		// set all available data with available info
		// from parents
		//		from UMLModelElement
		aTable.name = name;  
		aTable.kind = kind;
				
		//		from Classifier
		// TO DO : Attribute-type
		asClassifier = this.oclAsType(Classifier);
		// TO DO : for each attribute typed by this class => ??
		
		// from member attributes : NONE		
		// from associations
		// for each attribute owned by this class => associates their related rdbms objects
		attribute_it = attribute.get_new_iterator();
		attribute_it.start();  
		while attribute_it.is_off().not()
		{
			// get the attribute related object (there should be only 1)
			attribute_related_it = attribute_it.item().rdbms_related_me_set.get_new_iterator();
			attribute_related_it.start();
			while attribute_related_it.is_off().not()
			{
				associate (column = attribute_related_it.item(), owner = aTable	);
				attribute_related_it.next();
			}
			attribute_it.next();
		}
		
		

		
	}
	unset_related()
	{
		// TO DO
		// how to remove obejects ?
	}
}

class Attribute
{
	creation make()
	{
		// we still doesn't know if the attribute type is primitive or not
		// PB when do we know that ? => when associating the attribute with a classifier
	}
	
	// overwrite the standard get and setter for the associations in order to do the job on the RDBMS repository
	set_type(aType : Classifier)
	{
		// if type has changed /* Do nothing condition */
		if this.type.<>(aType)
		{
			
			if( rdbms_related_me_set.size().=(1) )
			{
				unset_related();
			}
			type = aType;
				// the related object was not set or changed
				// now we know which type is the attribute we can create it
			create_related();

		}
		else { // Same type : Nothing to do }
	}
	get_type() : Classifier
	{
		// TO DO		
	}
	
	set_kind(aKind : Standard::String)
	{
		// if attribute kind is primary, the column is bound to the key
		// TO DO
	}
	
	set_owner(aClass : Class) // TODO
	{
	}
	
	get_owner() : Class // TO DO
	{
	}
	
	
	delete()
	{
		// TO DO
	}
	
	/**
	  * Depending of the moment where the informations are precise enought, we can eventually 
	  * create a corresponding rdbms object 
	  */
	create_related()
	{
		aColumn : target_model::Column;
		owner_table_it : Standard::Iterator;
		
		// if the classifier is a primitive type create a column
		if type.oclIsKindOf('PrimitiveDataType')
		{			
		
			aColumn = new rdbms::Column();
		
			// this table is related to this class
			rdbms_related_me_set = rdbms_related_me_set.including(aColumn);
		
			// for every known information (including inherited ones) set the rdbms equivalent.
			
			// as we have the related rdbms we can now set the column name and kind
			//   no longer use the uml name and kind, use rdbms one instead
			aColumn.name = name;  
			aColumn.kind = kind;
			
			if type.name.=('int')
			{
				aColumn.type = 'NUMBER';
			}
			else
			{
				aColumn.type = 'VARCHAR';
			}
			
			// if the attribute has owner
			if owner.oclIsUndefined().not()
			{
				// this column is owned by the corresponding Table 
					// get the owner table
					
					owner_table_it = owner.rdbms_related_me_set.get_new_iterator();
				owner_table_it.start();  // there should be only 0..1 owner ( 0 occurs if the table hasn't enough info to be created
				while owner_table_it.is_off().not()
				{
					associate (column = aColumn, owner = it.item()	);
					owner_table_it.next();
				}
			}
		}
		else
		{
			// TO DO
		}
	}
	/** 
	  * in some cases, the related object may need to be deleted
	  */
	unset_related()
	{
		// TO DO
		// depending of the previous type remove associations 
		// this is almost the opposite of create_related
		// 		pb: what to do with element that are no more connected ?
		if type.oclIsKindOf('PrimitiveDataType')
		{
			// simply remove the related column
			aColumn : target_model::Column;
			aColumn = retrieve_related();
			
			delete (aColumn); // note the delete shall dissociate from any associated elements
		}
		else
		{
			// TO DO
		}			
	}
}


class PrimitiveDataType
{
		// TO DO
		
		set_name(aNameString : Standard::String)
		{
			it = Standard::Iterator;
			// depending on this new string the attributes typed by this primitive data type may have to change

			/* Do nothing condition */
			if name.<>(aNameString)
			{
				name = aNameString;				
				// for each attribute of this type
				it = Attribute.get_new_iterator();
				it.start();
				while it.is_off().not()
				{
					// may be optimized with local variable or inversing the while and the if.
					if name.=('int')
					{
						// column type = 'NUMBER'
						it.item().rdbms_related_me.type = 'NUMBER';
					}
					else
					{
						// column type = 'VARCHAR'					
						it.item().rdbms_related_me.type = 'VARCHAR';
					}
					it.next();
				}
			}
			else { // do nothing if equal 
		}
		
	
	delete()
	{
		// TO DO
	}
	
}


class Association
{
		// TO DO
}