/******************************************************************************
 * $Id: SimpleUML_Transformations.mtl,v 1.2 2004-10-14 12:03:32 jpthibau Exp $
 * Simple transformations that apply to SimpleUML models
 *	includes : 
 *		Attribute_Privatize that privatize 
 * Syntax used : BasicMTL V1.9 syntax cf. basicmtlParser.mtl V1.9
 *
 ******************************************************************************/


library SimpleUMLTransformations;

//-- Lib local models --
//Repository models
model source_model : RepositoryModel;		// should be a SimpleUML MetaModel
// Typed models 
model mdrdriver : MDRDriver;				// needed to connect to models in MDR


/********************************************
 * Entry point operation : main
 ********************************************/
main():Standard::Void
{	
	// local variables
	mdrdriver         : MDRDriver::MDRModelManager;
    projectPath       : Standard::String;
	metamodelFilename : Standard::String;
	inputFilename     : Standard::String;
	outputFilename    : Standard::String;

	// we define some filenames 
	projectPath       := '../../';
	metamodelFilename := projectPath.concat ('model/XMI1.2_MOF1.4/SimpleUmlMM_MOF.xml');
	inputFilename     := projectPath.concat ('../SimpleUML.transformations/models/XMI1.2_SimpleUML/SimpleUML_FullExample.xml');
	outputFilename    := projectPath.concat ('../SimpleUML.transformations/models/XMI1.2_SimpleUML/SimpleUML_FullExample_modified.xml');



    // we initialize the MDR driver			
	mdrdriver := new MDRDriver::MDRModelManager();
	mdrdriver.init();
	 
	// intanciate the model, save result in another file
	source_model := mdrdriver.getModelFromXMI (
		metamodelFilename, 
		'SimpleUmlMM',			// name of the root package for the MM
		'SimpleUML_model', 
		inputFilename,
		outputFilename
	);
    
 	'model connected'.toOut();
	
	// stupidDemoTransform();
	associations2attributes();
	
}

/******************************************** 
 * break all associations in two attributes
 ********************************************/
associations2attributes()
{
	// local variables
	associationIterator : Standard::Iterator;
	associationSet : Standard::Set;
	anAssociation : source_model::Association;	
	
	associationSet := !source_model::Association!.allInstances();
	
	associationIterator := associationSet.getNewIterator();
	associationIterator.start();
	
	while associationIterator.isOn() 
	{		
		anAssociation := associationIterator.item().oclAsType(!source_model::Association!);
		association2attributes(anAssociation); 					
		associationIterator.next();
	}
}

/******************************************** 
 * break an association in two attributes
 ********************************************/
association2attributes(anAssociation : source_model::Association) 
{	
	// local variables
	sourceClass, destClass : source_model::Class;
	sourceClassName, destClassName, associationName : Standard::String;
	name : Standard::String;
	
	// get source
	sourceClass := anAssociation.source;
	sourceClassName := sourceClass.name;
	// get destination
	destClass := anAssociation.destination;
	destClassName := destClass.name;
	
	// add attribute on source
	associationName := anAssociation.name;
		// as the association in SimpleUML  have no role name, we simply use the class name + the association name
	name := 'association_';
	name := name.concat(associationName);
	name := name.concat('_');
	name := name.concat(sourceClassName);
	addAttribute(sourceClass, name, destClass);
	// add attribute on destination
	// name := 'association_'.concat(anAssociation.name).concat('_').concat(destClass.name);
	addAttribute(destClass, name, sourceClass);	
	
	// remove association
	anAssociation.delete();
}

/******************************************** 
 * add an attribute on a class
 ********************************************/
addAttribute(aClass: source_model::Class; name : Standard::String; attributeType : source_model::ModelElement)
{
	// local variables
	anAttribute : source_model::Attribute;
		
	// create new attribute for this class
	anAttribute := new source_model::Attribute();
	anAttribute.name := name;		
	associate ( typed := anAttribute : source_model::Attribute, type := attributeType : source_model::Classifier);
	associate ( attribute := anAttribute : source_model::Attribute, owner := aClass : source_model::Class);
	
}

/********************************************
 * Add a new attribute and change the class name (something stupid but visible in the result model
 ********************************************/
stupidDemoTransform():Standard::Void
{
	// local variables
	classIterator 	: Standard::Iterator;
	classSet 		: Standard::Set;
	aClass 			: source_model::Class;
	anAttribute 	: source_model::Attribute;
	className 		: Standard::String;	
	
	classSet := !source_model::Class!.allInstances();
	
	classIterator := classSet.getNewIterator();
	classIterator.start();
	
	while classIterator.isOn() 
	{		
		aClass := classIterator.item().oclAsType(!source_model::Class!);
		
		// create new attribute for this class
		anAttribute := new source_model::Attribute();
		className := aClass.name; 	
		anAttribute.name := 'new_attribute'.concat(className);	
		associate ( attribute := anAttribute : source_model::Attribute, owner := aClass : source_model::Class);		
		// change class name
		aClass.name := className.concat('_changed'); 
					
		classIterator.next();
	}
	
		
}
