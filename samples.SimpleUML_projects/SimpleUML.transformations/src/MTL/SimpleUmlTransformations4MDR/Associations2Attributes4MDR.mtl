/*
 * $Id: Associations2Attributes4MDR.mtl,v 1.1 2004-08-16 11:46:26 dvojtise Exp $
 *
 * Sample of use of associations2attribute with a MDR repository
 */
 
library SimpleUmlTransformations4MDR;
// no extends for this lib
 
// Lib local model
model source_model : RepositoryModel;		// must be conform to SimpleUML MetaModel

// Library level methods
// ---------------------
// Typed model 
model SimpleUmlTransformation_lib : SimpleUmlTransformations;

// Library contructors
// -------------------
main():Standard::Void 
{
	anAssociations2Attributes4MDR : Associations2Attributes4MDR;

	anAssociations2Attributes4MDR :=  new Associations2Attributes4MDR();
	anAssociations2Attributes4MDR.main();
	

}

class Associations2Attributes4MDR
{ 
	/********************************************/
	// Entry point operation : main
	/********************************************/
	main():Standard::Void 
	{
		// local variables
		anAssociations2AttributesTransfo : SimpleUmlTransformations::Associations2Attributes;
		aMdrDriver         : MDRDriver::MDRModelManager;
	    projectPath       : Standard::String;
		src_metamodelFilename : Standard::String;
		src_inputFilename     : Standard::String;
		src_outputFilename    : Standard::String;
	
		// we define some filenames 
		projectPath       := '';
		src_metamodelFilename := projectPath.concat ('../SimpleUML/model/XMI1.2_MOF1.4/SimpleUmlMM_MOF.xml');
		src_inputFilename     := projectPath.concat ('models/XMI1.2_SimpleUML/SimpleUML_FullExample.xml');
		src_outputFilename    := projectPath.concat ('models/XMI1.2_SimpleUML/SimpleUML_FullExample_modified_by_MDR.xml');
	
	    // we initialize the MDR driver			
		aMdrDriver := new MDRDriver::MDRModelManager();
		aMdrDriver.init();
		
			
		// intanciate the source model, no changes in the source model
		source_model := aMdrDriver.getModelFromXMI (
			src_metamodelFilename, 
			'SimpleUmlMM',		// name of the root element in the Uml1.4 metamodel
			'SimpleUML_source_model', 
			src_inputFilename,
			src_outputFilename
		);
	
	 	'source model connected'.toOut(); 
		
		// instanciate transformation lib
		SimpleUmlTransformation_lib := new SimpleUmlTransformations();
		// instanciate transformation tool class, and initialize the library models	
		anAssociations2AttributesTransfo := new SimpleUmlTransformation_lib::Associations2Attributes();
		anAssociations2AttributesTransfo.initmodel(source_model);
		// start the transformation
		anAssociations2AttributesTransfo.associations2attributes();
	
	}
}