<?xml version="1.0" encoding="UTF-8"?>
<section>
  <title>BasicMTL concepts</title>

  <para>The attachee execution semantic is clearly a similar one to existing
  Object Oriented languages.</para>

  <para>The concept presented here are illustrated with sample written using
  the concrete syntax detailed in §</para>

  <section>
    <title>General principles</title>

    <para>BasicMTL language has one main concept: there is an intended analogy
    between classes defined by the transformation programmer and the
    metaclasses of the manipulated model.</para>

    <figure>
      <title>Basic TL object - Model element analogy</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="figures/ModelElement_MTLObject_Analogy.gif" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Thus we have this table of correspondence:</para>

    <table frame="none">
      <title>Tableau 1. BasicMTL object -model element concepts
      correspondence</title>

      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="230.3pt" />

        <colspec colname="col2" colnum="2" colwidth="230.8pt" />

        <tbody>
          <row>
            <entry colname="col1" colsep="0" rowsep="0"
            valign="top"><para>model concept</para></entry>

            <entry colname="col2" colsep="0" rowsep="0"
            valign="top"><para>BasicMTL concept</para></entry>
          </row>

          <row>
            <entry colname="col1" colsep="0" rowsep="0"
            valign="top"><para>Meta-class</para></entry>

            <entry colname="col2" colsep="0" rowsep="0"
            valign="top"><para>Class</para></entry>
          </row>

          <row>
            <entry colname="col1" colsep="0" rowsep="0"
            valign="top"><para>Meta-operation</para></entry>

            <entry colname="col2" colsep="0" rowsep="0"
            valign="top"><para>Operation</para></entry>
          </row>

          <row>
            <entry colname="col1" colsep="0" rowsep="0"
            valign="top"><para>Extent</para></entry>

            <entry colname="col2" colsep="0" rowsep="0"
            valign="top"><para>Library</para></entry>
          </row>

          <row>
            <entry colname="col1" colsep="0" rowsep="0"
            valign="top"><para>Meta-attribute</para></entry>

            <entry colname="col2" colsep="0" rowsep="0"
            valign="top"><para>Attribute</para></entry>
          </row>

          <row>
            <entry colname="col1" colsep="0" rowsep="0"
            valign="top"><para>Meta-association</para></entry>

            <entry colname="col2" colsep="0" rowsep="0"
            valign="top"><para>Association</para></entry>
          </row>

          <row>
            <entry colname="col1" colsep="0" rowsep="0" valign="top"><para>…
            (and so on)</para></entry>

            <entry colname="col2" colsep="0" rowsep="0" valign="top"></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Basic Values and Types</title>

    <para>BasicMTL disposes of a variety of basic values and types.</para>

    <para>All of them is considered like an object and then dispose of range
    of functionalities. Functionnalities of each of them is detailed more
    precisely in § .</para>

    <para>Note : there is no primitive types like int, bool, or string in
    java. Everything is object.</para>

    <para>However, some of the standard types may be obtained using literal
    value in the language (a kind of autoboxing). This is the case for:</para>

    <section>
      <title>Integer</title>

      <para role="CodeProg">anInteger : Standard::Integer;</para>

      <para role="CodeProg">anInteger := 3;</para>
    </section>

    <section>
      <title>Real</title>

      <para role="CodeProg">aReal : StandardS:Real;</para>

      <para role="CodeProg">aReal := 3.5;</para>
    </section>

    <section>
      <title>Boolean</title>

      <para role="CodeProg">aBoolean : Standard::Boolean;</para>

      <para role="CodeProg">aBoolean := true;</para>
    </section>

    <section>
      <title>String</title>

      <para role="CodeProg">aString : Standard::String;</para>

      <para role="CodeProg">aString := ‘hello world’;</para>
    </section>

    <section>
      <title>OclType</title>

      <para role="CodeProg">aType : Standard::OclType;</para>

      <para role="CodeProg">aType := !source_model::Core::Attribute!;</para>

      <para>This literal allows to quickly get a metaclass from a model. It is
      expressed by surrounding the name of the Type with exclamation marks
      ‘!’.</para>

      <para>This is really useful in order to find an entry point in a model
      (for example using th AllInstances() method applicable to the
      type)</para>

      <para>OclType objects are really useful for building generic functions
      or factories.</para>

      <para>The standard library also provides the necessary structural
      objects for collection and iterator.</para>

      <para>Like in OCL, Classes in Standard doesn’t provide functionalities
      which have side effect. There is no mutator on these objects. This is
      done on purpose as we plan to add contract to the language.</para>

      <para>For example:</para>

      <para role="CodeProg">aSet1,aSet2 : Standard::Set;</para>

      <para role="CodeProg">aSet1 := new Standard::Set();</para>

      <para role="CodeProg">aSet2 := aSet1.including(‘hello’);</para>

      <para>The Set including() method returns a new Set without changing the
      original Set itself.</para>

      <para>The only instruction which has direct side effect is the
      assignment see §</para>
    </section>
  </section>

  <section>
    <title>Instructions</title>

    <para>BasicMTL uses an imperative style and actions are organized in
    instructions sequences.</para>

    <section>
      <title>Assignment</title>

      <para>This is the way we can chaige values, by replacing one by
      another.</para>

      <para>Ex:</para>

      <para role="CodeProg">aString1, aString2 : Standard::String;</para>

      <para role="CodeProg">aString1 := ‘Hello’;</para>

      <para role="CodeProg">aString2 := aString1;</para>

      <para>aString1 and aString2 objects points to the same String object
      whose value is ‘Hello’;</para>
    </section>

    <section>
      <title>Execution control</title>

      <para>BasicMTL dispose of very basic execution control : while and if.
      They are used in the usual way.</para>

      <para>The execution control may be broken using the return statement.
      Good programmer s ould avoid this possibility as often as
      possible.</para>
    </section>

    <section>
      <title>Expression operators</title>

      <para>BasicMTL provides (since beta4) operators for its primitives
      types. This are the usual ones for aritmetic, boolean operations.</para>

      <para>It uses usual precedence. User can obviously overwrite the
      precedence using bracket “(“ “)”.</para>

      <para role="CodeProg">not</para>

      <para role="CodeProg">* /</para>

      <para role="CodeProg">+ -</para>

      <para role="CodeProg">= &lt;&gt; &lt; &lt;= &gt; &gt;=</para>

      <para role="CodeProg">and</para>

      <para role="CodeProg">or xor implies (other operators have the same
      precedence as or)</para>

      <para>Please look to the grammar § for the details of the
      precedence.</para>
    </section>
  </section>

  <section>
    <title>Operatiofs</title>

    <para>This is the basic transformation program structure.</para>

    <para>In BasicMTL, all operations of a class must have a unique name
    within the owning class. Parameters are not used to</para>

    <para>Parameters are passed by value.</para>

    <para>Please look at your preferred Java manual in order to see what it
    implies.</para>

    <para>Return value is sent using the return statement.</para>

    <para>Ex:</para>

    <para role="CodeProg">myOp(aValue : Standard::Integer) :
    Standard::Integer</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">return aValue.[+](1);</para>

    <para role="CodeProg">}</para>
  </section>

  <section>
    <title>Classes</title>

    <para>As any Object Oriented langulge, BasicMTL uses classes to structure
    the code.</para>

    <para>Classes may extend other classes.</para>

    <para>Classes may be organized in packages.</para>

    <para>Classes are contained in Libraries.</para>

    <para>The concept of BasicMTL classes is unified with the concept of Class
    of the manipulated Metamodel. Thus many actions available on BasicMTL
    Classes are also available on the model metaclass.</para>

    <para>For example :</para>

    <para>Instantiating a BasicMTL class</para>

    <para role="CodeProg">Class MyClass</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">init(aParam : Standard::String)</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">B</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">aMyclass : MyClass;</para>

    <para role="CodeProg">aMyClass := new MyClass();</para>

    <para role="CodeProg">aMyClass.init();</para>

    <para>creating a modelelement of type Table</para>

    <para role="CodeProg">model target_model : RepositoryModel;</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">aTable : target_model::Table;</para>

    <para role="CodeProg">aTable := new target_model::Table ();</para>

    <para>Currently, no constructor parameter is allowed. The user should use
    initialization methods instead.</para>

    <para>Ex:</para>

    <para role="CodeProg">aMyClass := new MyClass();</para>

    <para role="CodeProg">aMyClass.init(‘Hello’);</para>

    <para>or</para>

    <para role="CodeProg">aMyClass := new MyClass().init(‘Hello’);</para>
  </section>

  <section>
    <title>Model Navigation and modificataon</title>

    <para>Navigating a model is as simple as navigating an object in Object
    oriented languages.</para>

    <section>
      <title></title>

      <section>
        <title>Connection to a model</title>

        <para>As explained in §. , connecting to a model is repository
        dependent.</para>

        <para>With the current version the MDR driver does this .</para>

        <para>Ex:</para>

        <para role="CodeProg">model the_model : RepositoryModel;</para>

        <para role="CodeProg">…</para>

        <para role="CodeProg">mdrdriver : MDRDriver::MDRModelManager;</para>

        <para role="CodeProg">…</para>

        <para role="CodeProg">mdrdriver := new
        MDRDriver::MDRModelManager();</para>

        <para role="CodeProg">mdrdriver.inin();</para>

        <para role="CodeProg"></para>

        <para role="CodeProg">the_model := mdrdriver.getModelFromXMI (</para>

        <para role="CodeProg">src_metamodelFilename,</para>

        <para role="CodeProg">'SimpleDatabaseMM', // name of the root
        package</para>

        <para role="CodeProg">'SimpleDB_source_model', // name of the
        model</para>

        <para role="CodeProg">src_Filename,</para>

        <para role="CodeProg">save_Filename);</para>

        <para>Where src_metamodelFilename, src_Filename and save_Filename are
        string which corresponds to files which respectively are : the
        metamodel, the input model file, and the file where to store the model
        when disconnecting.</para>

        <para>Then, the eaeiest way to get an entry point in the connected
        model is to use the OclType literal and get all instances from it and
        navigate the collection.</para>

        <para>Ex:</para>

        <para role="CodeProg">aSet : Standard::Set;</para>

        <para role="CodeProg">aSet :=
        !the_model::Table!.allInstances();</para>
      </section>

      <section>
        <title>Creating a new model element</title>

        <para>Simply use the new instruction.</para>

        <para>Ex:</para>

        <informalexample>
          <programlisting>aColumn : the_model::Column;
aColumn := new the_model::Column();</programlisting>
        </informalexample>

        <para>Creates a new column in the model the_model.</para>
      </section>

      <section>
        <title>Attributes</title>

        <para>For example( in the S=mple Database MM) getting and modifying
        the attribute kind of a table.</para>

        <para role="CodeProg">aString : Standard::String;</para>

        <para role="CodeProg">…</para>

        <para role="CodeProg">aString := aTable.kind; //get the attributeof
        the modelElement Table</para>

        <para role="CodeProg">aTable.kind := ‘primitive’; //set the
        attribute</para>
      </section>

      <section>
        <title>Associations</title>

        <para>The simpliest way to navigate associations is to use the role
        name from the model element</para>

        <para>Ex:</para>

        <para role="CodeProg">aColumn&nbsp;: the_model::Column&nbsp;;</para>

        <para role="CodeProg">aColumn&nbsp;:= aTable.column;</para>

        <para>setting an association needs the usl of the special instruction
        associate. Associate needs different information which are usefull
        depending of the metamodel.</para>

        <para>Ex: all of these are equivalent.</para>

        <para role="CodeProg">associate(column := aColumn :
        themodel::Table;</para>

        <para role="CodeProg">owner := aTable : the_model::Column); // this is
        the full syntax</para>

        <para role="CodeProg">associate(column := aColumn; owner := aTable
        );</para>

        <para role="CodeProg">associate(aColumn : themodel::Table; aTable :
        the_model::Column);</para>

        <para role="CodeProg">associate(aTable; aColumn);</para>
      </section>
    </section>
  </section>

  <section>
    <title>Getter and Setter</title>

    <para>In onder to better support accessors and mutators, BasicMTL allows
    to define methods which are setter or getter of the class
    attributes.</para>

    <para>This allows to call automatically these methods when trying to
    get/set the attribute.</para>

    <para>Ex:</para>

    <para role="CodeProg">class MyCass</para>

    <para role="CodeProg">/* Attributes */</para>

    <para role="CodeProg">name : Standard::String;</para>

    <para role="CodeProg">/* getters and setters declaration */</para>

    <para role="CodeProg">getter name is mygetname_function;</para>

    <para role="CodeProg">setter name is mysetname_function;</para>

    <para></para>

    <para role="CodeProg">mygetname_function() : Standard::Stting</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">return name;</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">mysetname_function(newName :
    Standard::String)</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">name := newName;</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">}</para>

    <para>Currently (beta3), associations don’t support getter and setter
    methods.</para>
  </section>

  <section>
    <title>Associations</title>

    <para>BasicMTL support associations between classes.</para>

    <para>They work like in MOF1.4. Associations are defined in (and belong
    to) the libraries.</para>

    <para>Associations are allowed between BasicMTL classes, or between
    classes of the same model. Cross models associations are curren ly
    forbidden.</para>

    <para>Navigating association is done using the role name. Creating link
    according to the association is done using the associate
    instructuction.</para>

    <para>Ex:</para>

    <para role="CodeProg">class A {</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">aB := new B();</para>

    <para role="CodeProg">associate(theA := this; myBs := aB);</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">class B {</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">aA : A:</para>

    <para role="CodeProg">aA := this.theA; // navigate the association</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">// association</para>

    <para role="CodeProg">// A 0..1&lt;-theA-----myBs-&gt;* {Ordered}B</para>

    <para role="CodeProg">association {</para>

    <para role="CodeProg">theA : A (0 1);</para>

    <para role="CodeProg">myBs : B -1 ordered;</para>

    <para role="CodeProg">}</para>

    <para>Removing a link between two classes is achieved using the d ssociate
    instruction.</para>

    <para>Ex:</para>

    <para role="CodeProg">dissociate(aA; aB);</para>
  </section>

  <section>
    <title>Libraries</title>

    <para>The concept of library is different from the concept of package. The
    difference is equivalent to the difference of MOF package and MOF
    extent.</para>

    <para>Package is a concept used to organize the classes using
    namespaces.</para>

    <para>Library/extent is used as a deployment concept. In MOF, two
    different extent can hold the same package. The difference occurs when
    using it.</para>

    <para>Package may be used inside a library to organize its classes.</para>

    <para>Ex:</para>

    <para role="CodeProg">library ToolLib;</para>

    <para role="CodeProg">model usedModel : RepositoryModel;</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">class Myclass{</para>

    <para role="CodeProg">init(theUsedModel : RepositoryModel)</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">usedModel := theUsedModel;</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">/***********/</para>

    <para role="CodeProg">library UsingLib1;</para>

    <para role="CodeProg">model toolLib1 : ToolLib;</para>

    <para role="CodeProg">model usedModel1 : RepositoryModel;</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">// usedModel1 is got from its proper repository
    specific method</para>

    <para role="CodeProg">toolLib1 := new UsedLib();</para>

    <para role="CodeProg">aMyClass := new
    toolLib1::MyClass().init(usedModel1);</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">/***********/</para>

    <para role="CodeProg">liyrary UsingLib2;</para>

    <para role="CodeProg">model toolLib2 : ToolLib;</para>

    <para role="CodeProg">model usedModel2 : RepositoryModel;</para>

    <para role="CodeProg">// usedModel1 is got from its proper repository
    specific method</para>

    <para role="CodeProg">toolLib2 := new UsedLib();</para>

    <para role="CodeProg">aMyClass := new
    toolLib2::MyClass().init(usedModel2);</para>

    <para role="CodeProg">…</para>

    <para>In this sample, UsingLib1 and UsingLib2 both use ToolLib but each
    one with its own model. (This sample doesn’t use package naming)</para>

    <section>
      <title>Library extend</title>

      <para>BasicMTLLibrary can extend another Library. See Library extenr in
      §</para>

      <para>This means that any elements defined in the inherited library are
      known in this library. If a given Class has the same qualified name in
      both Library, then</para>

      <para>Library extend is used for several purposes :</para>

      <itemizedlist mark="disc" spacing="normal">
        <listitem>
          <para>Metamodel helpers</para>
        </listitem>

        <listitem>
          <para>Views</para>
        </listitem>
      </itemizedlist>

      <para>Enabling library extend allows to apply some kind of design
      patterns to a whole library instead of applying it to a single
      one.</para>

      <section>
        <title>Metamodel helper with library extend</title>

        <para>Extending a repository mexamodel allows to easily add some
        helper operations to this metamodels.</para>
      </section>

      <section>
        <title>Metamodel view with library extend</title>

        <sidebar>
          <para role="caption"><inlinemediaobject>
              <imageobject>
                <imagedata depth="109.1mm"
                           fileref="figures/ViewAdapterSample1.gif"
                           format="GIF" srccredit="embed" />
              </imageobject>
            </inlinemediaobject>Figure <phrase
          role="GEN_SEQ">3</phrase><phrase lang="">. Example of view using
          library extend</phrase></para>
        </sidebar>

        <para>Extending a repository metamodel allows to implement a special
        kind of transformation: the view/adapter transformation. Using a view
        adapter transformation allows to manipulate an abstract but complete
        enough metamodel instead of the concrete one. It allows to radically
        change the structure of the manipulated metamodel.</para>

        <para>Ex :</para>

        <para>Privatize transformation only knows about “MMmanipulé” library
        which contains only the “classe”, “champ”, “Parametre”, “Attribut” and
        “Operation” concepts. The role of the concrete adapters is to
        implement this abstraction for a given Metamodel. An adapter ensures
        the mapping between the concrete MM and the abstract Library.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Exceptions</title>

    <para>BasicMTL disposes of an exception mec anism.</para>

    <para>It behaves in the same way as the Java exception mechanism.</para>

    <para>Every BasicMTL object may be thrown. However, clean transformations
    should define specialized exception classes for a better
    management.</para>

    <para>Ex:</para>

    <para role="CodeProg">try</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">throw new UserException();</para>

    <para role="CodeProg">}</para>

    <para role="CodeProg">catch (UserException)</para>

    <para role="CodeProg">{</para>

    <para role="CodeProg">…</para>

    <para role="CodeProg">}</para>
  </section>

  <section>
    <title>Deletion and Garbage collection</title>

    <para>BasicMTL use a garbage collector for its BasicMTL objects. The
    transformation developer doesn’t have to worry about memory.</para>

    <para>Underlying mechaoism is the same as the Java garbage
    collector.</para>

    <para>Nevertheless, Model element in repository doesn’t behave the same.
    To remove a model element, the transformation developer must call the
    special method delete().</para>

    <para>Ex:</para>

    <para role="CodeProg">aColumn.delete();</para>

    <para>Deleting a model element also remove the associations.</para>

    <para>In the BasicMTL – Model analogy we say that Model elements are
    persistent and that BasicMTL objects are transient.</para>
  </section>

  <section>
    <title>Loadtng and saving models</title>

    <para>This is repository dependent. In fact it depends on what the
    concrete repository need to be able to perform these actions. For example,
    for loading we probably have to indicate which metamodel the repository
    must use, where to find the model, which format …</para>

    <para>For saving we have the same trouble: where, which format, etc
    …</para>

    <para>BasicMTL allows to minimize the impact of this repository specific
    part on the transformation code.</para>

    <para>Two techniques:</para>

    <itemizedlist mark="disc" spacing="normal">
      <listitem>
        <para>The user can pass the model as parameters from a repository
        specific library to a repository independent library.</para>
      </listitem>

      <listitem>
        <para>The user can extend a repository independent library adding
        repository dependent actions.</para>
      </listitem>
    </itemizedlist>

    <para>The repository driver must provide at least a method that returns a
    RepositoryModel.</para>

    <para>For the save problem, some implementation of repository driver may
    also have some special behavior that help the user.</para>

    <para>For exlmple it may ensure that any unsaved model will be saved when
    the library is garbage collected or when the transformation ends.</para>

    <para>MDR and ModFact drivers of the current prototype propose this
    service. Nevertheless the needed information are provided at load
    time…</para>

    <para>Look sample in § which uses MDR in order to get the model.</para>

    <para>For more information, please look to each repository driver api to
    know which are the concrere ways to load and save models.</para>
  </section>
</section>