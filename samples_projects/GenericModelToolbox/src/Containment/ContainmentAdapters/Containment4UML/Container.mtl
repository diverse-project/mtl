library Containment4UML;

model UML : RepositoryModel;

class Container extends ContainmentDefaultAdapter::ProxyContainer
{
	/** Definition of the hierarchical structure of the adapter class. */
	getContents() : Standard::Set
	{
		if (isNull(this.contents))
		{
			this.contents := new Standard::Set ();

			if (getRole()='root')
			{
				foreach (aPackage : UML::Model_Management::Package) 
				{
					addChild (aPackage, 'Package');
				}
			}

			if (getRole()='Package')
			{
				foreach (aClass : UML::Core::ModelElement) in (getProxySubject().oclAsType(!UML::Model_Management::Package!).ownedElement) where (aClass.oclIsTypeOf(!UML::Core::Class!))
				{
					addChild (aClass, 'Class');
				}
			}

			if (getRole()='Class')
			{
				foreach (aAttribute : UML::Core::ModelElement) in (getProxySubject().oclAsType(!UML::Core::Class!).feature) where (aAttribute.oclIsTypeOf(!UML::Core::Attribute!))
				{
					addChild (aAttribute, 'Attribute');
				}
				foreach (aOperation : UML::Core::ModelElement) in (getProxySubject().oclAsType(!UML::Core::Class!).feature) where (aOperation.oclIsTypeOf(!UML::Core::Operation!))
				{
					addChild (aOperation, 'Operation');
				}
			}
			
			if ( getRole()='Operation')
			{
				foreach (aParameter : UML::Core::ModelElement) in (getProxySubject().oclAsType(!UML::Core::Operation!).parameter) where (aParameter.oclIsTypeOf(!UML::Core::Parameter!))
				{
					addChild (aParameter, 'Parameter');
				}
			}
		}
		
		return this.contents;
	}


	/** Definition of the Factory Method declared in ContainmentDefaultAdapter::AbstractContainer */
	createContainer () : ContainmentView::Container
	{
		return  new Containment4UML::Container();
	}

	/** Definition of the Template Method primitive declared in ContainmentDefaultAdapter::ProxyContainer */
	getProxySubjectName (subject : Standard::OclAny) : Standard::String
	{
		element : UML::Core::ModelElement;
		result  : Standard::String;

		element := subject.oclAsType(!UML::Core::ModelElement!);
		
		// we need to check that the name is null or not.
		if (isNull(element.name))  { result := '';}
		else                       { result := element.name.oclAsType(!Standard::String!); }
		
		return result;
	}

	/** Definition of the Template Method primitive declared in ContainmentDefaultAdapter::ProxyContainer */
	setProxySubjectName (subject : Standard::OclAny;  name : Standard::String)
	{
		subject.oclAsType(!UML::Core::ModelElement!).name := name;
	}


	/** Definition of the Template Method primitive declared in ContainmentDefaultAdapter::ProxyContainer */
	initTheModel (modelPath : Standard::String) 
	{
		driver : MDRDriver::MDRModelManager;
		driver := new MDRDriver::MDRModelManager();
		driver.init();
		UML := driver.getModelFromXMI ('../../MetaModels/UML/UML_metamodel.xmi', 'UML', modelPath,  modelPath, modelPath.concat('.modified'));
	}
	
}

