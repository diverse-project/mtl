library ContainmentFactory;

class CommandFactory
{
	aFind          : ContainmentCommands::Find;
	aFlatten       : ContainmentCommands::Flatten;
	aHierarchy     : ContainmentCommands::Hierarchy;
	aQualifiedName : ContainmentCommands::QualifiedName;
	aToString      : ContainmentCommands::ToString;
	aToStringDeep  : ContainmentCommands::ToStringDeep;
	aReplace       : ContainmentCommands::Replace;


	/** */
	find (name : Standard::String;  role : Standard::String) : ContainmentCommands::Find
	{
		if (isNull(aFind))
		{
			aFind := new ContainmentCommands::Find();
		}
		aFind.init (name,role);
		return aFind ;
	}

	/** */
	flatten () : ContainmentCommands::Flatten
	{
		if (isNull(aFlatten))
		{
			aFlatten := new ContainmentCommands::Flatten();
		}
		return aFlatten;
	}

	/** */
	hierarchy () : ContainmentCommands::Hierarchy
	{
		if (isNull(aHierarchy))
		{
			aHierarchy := new ContainmentCommands::Hierarchy ();
		}
		return aHierarchy;
	}

	/** */
	qualifiedName () : ContainmentCommands::QualifiedName
	{
		if (isNull(aQualifiedName))
		{
			aQualifiedName := new ContainmentCommands::QualifiedName ();
		}
		return aQualifiedName;
	}

	/** */
	toString (showParent : Standard::Boolean) : ContainmentCommands::ToString
	{
		if (isNull(aToString))
		{
			aToString := new ContainmentCommands::ToString ();
		}
		aToString.init (showParent);
		return aToString;
	}

	/** */
	toStringDeep () : ContainmentCommands::ToStringDeep
	{
		if (isNull(aToStringDeep))
		{
			aToStringDeep := new ContainmentCommands::ToStringDeep ();
		}
		return aToStringDeep;
	}

	/** */
	replace (
		searchExp  : Standard::String;  
		replaceExp : Standard::String;  
		roleExp    : Standard::String
	) : ContainmentCommands::Replace
	{
		if (isNull(aReplace))
		{
			aReplace := new ContainmentCommands::Replace ();
		}
		aReplace.init (searchExp,replaceExp,roleExp);
		return aReplace;
	}
}