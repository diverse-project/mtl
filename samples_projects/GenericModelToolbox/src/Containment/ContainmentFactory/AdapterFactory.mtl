library ContainmentFactory;

class AdapterFactory
{
	adapterMOF   : Containment4MOF::Container;
	adapterUML   : Containment4UML::Container;
	adapterRDBMS : Containment4SimpleRDBMS::Container;


	/** */
	getInstance (kind : Standard::String;  path : Standard::String) : ContainmentView::Container
	{
		if (kind='MOF')
		{
			return getInstanceMOF (path);
		}
		elseif (kind='UML')
		{
			return getInstanceUML (path);
		}
		elseif (kind='RDBMS')
		{
			return getInstanceRDBMS (path);
		}
		else
		{
			'IMPOSSIBLE CASE IN ContainmentFactory::AdapterFactory::getInstance...'.toErr();
			return null;
		}
	}


	/** */
	getInstanceMOF (path : Standard::String) : ContainmentView::Container
	{
		adapterMOF := new Containment4MOF::Container();
		adapterMOF.init(path);
		return adapterMOF;
	}
	
	/** */ 
	getInstanceUML (path : Standard::String) : ContainmentView::Container
	{
		adapterUML := new Containment4UML::Container();
		adapterUML.init(path);
		return adapterUML;
	}

	/** */
	getInstanceRDBMS (path : Standard::String) : ContainmentView::Container
	{
		adapterRDBMS := new Containment4SimpleRDBMS::Container();
		adapterRDBMS.init(path);
		return adapterRDBMS;
	}
}