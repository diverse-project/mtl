/******************************************************************************
 * $Id: main.mtl,v 1.2 2004/03/17 15:36:20 edrezen Exp $
 ******************************************************************************/

library ContainmentTests;


main (args : Standard::Sequence) : Standard::Void
{
	theContainer : Containment4MOF::Container;
	theContainer := new Containment4MOF::Container().init('../../Models/MOF/UML_model.xmi');

	//theContainer : Containment4UML::Container;
	//theContainer := new Containment4UML::Container().init('../../Models/UML/SimpleUml_model.xmi');
	
	//theContainer : Containment4SimpleRDBMS::Container;
	//theContainer := new Containment4SimpleRDBMS::Container().init('../../Models/SimpleRDBMS/SimpleRDBMS_model.xmi');

	new TestingClass().main (theContainer);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TestingClass
{
	cmd : ContainmentCommands::CommandFactory;

	/** */
	main (theContainer : ContainmentView::Container) : Standard::Void
	{
		// we define a factory for getting commands instances
		cmd := new ContainmentCommands::CommandFactory();

		test1 (theContainer);
	
		test2 (theContainer, '_', '');
	
		test3 (theContainer);
		
		test4 (theContainer, '_', '+', ''); // It adds a prefix to all Class containers 
		
	}
	
	
	/** */
	test1 (theContainer : ContainmentView::Container)
	{
		begin ('test 1');

		theContainer.execute (cmd.toStringDeep()).toOut();

		end ('test 1');
	}
	
	
	/** */
	test2 (
		theContainer : ContainmentView::Container;
		nameExp : Standard::String;
		roleExp : Standard::String
	)
	{
		begin ('test 2');
	
		foreach (c : ContainmentView::Container) in (theContainer.execute (cmd.find(nameExp,roleExp)))
		{
			c.execute (new ContainmentCommands::QualifiedName()).toOut();
		}
	
		end ('test 2');
	}
	
	
	
	/** */
	test3 (theContainer : ContainmentView::Container)
	{
		begin ('test 3');
	
		foreach (c : ContainmentView::Container) in (theContainer.execute (cmd.find('visibility','Attribute')))
		{
			c.execute (cmd.toString(false)).toOut();
			'----------------------------------------------------------------------'.toOut();
	
			foreach (c1 : ContainmentView::Container) in (c.execute (cmd.hierarchy()))
			{
				'    '.concat (c1.execute (cmd.toString(false)).oclAsType(!Standard::String!)).toOut();
			}
			
			''.toOut();
		}
	
		end ('test 3');
	}
	
	
	/** */
	test4 (
		theContainer : ContainmentView::Container;
		searchExp  : Standard::String;
		replaceExp : Standard::String;
		roleExp    : Standard::String
	)
	{
		begin ('test 4');
	
		theContainer.execute (cmd.replace(searchExp,replaceExp,roleExp));
		theContainer.execute (cmd.toStringDeep().init(false)).toOut();
		
		end ('test 4');
	}
	
	
	/** */
	begin (str : Standard::String)
	{
		'--------------------------------------------------------------------------------'.toOut();
		str.toOut();
		'--------------------------------------------------------------------------------'.toOut();
	}
	
	/** */
	end (str : Standard::String)
	{
		'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'.toOut();
		''.toOut();
	}

}