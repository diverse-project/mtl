/******************************************************************************
 * $Id: main.mtl,v 1.2 2004/03/17 15:36:20 edrezen Exp $
 ******************************************************************************/

library ContainmentTests;


main (args : Standard::Sequence) : Standard::Void
{
	path : Standard::String;
	path := '../../';
	
	new TestingClass().init('MOF',   path.concat('Models/MOF/UML_model.xmi')).execute();
//	new TestingClass().init('UML',   path.concat('Models/UML/SimpleUml_model.xmi')).execute();
//	new TestingClass().init('RDBMS', path.concat('Models/SimpleRDBMS/SimpleRDBMS_model.xmi')).execute();

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TestingClass
{
	adapter : ContainmentFactory::AdapterFactory;
	cmd     : ContainmentFactory::CommandFactory;
	root    : ContainmentView::Container;

	/** */
	init (adapterKind : Standard::String;  modelPath : Standard::String) : TestingClass
	{
		// we define a factory for getting commands instances
		cmd := new ContainmentFactory::CommandFactory();

		// we define a factory for getting an adapter
		adapter := new ContainmentFactory::AdapterFactory();

		// we choose the adapter to be used
		root := adapter.getInstance (adapterKind, modelPath);
	
		// we return the instance
		return this;
	}


	/** */
	execute () : Standard::OclAny
	{
		'\n****************************************************************************************************'.toOut();
		// we display a hierarchical representation of the container
		root.execute (cmd.toStringDeep()).toOut();
		
		'\n****************************************************************************************************'.toOut();
		// we search all containers whose name contains '_' and whose role contains 'as'	
		foreach (c : ContainmentView::Container) in (root.execute (cmd.find('', 'as')))
		{
			// we show the qualified name of the current container
			c.execute (cmd.qualifiedName()).toOut();
		}
		
		'\n****************************************************************************************************'.toOut();
		// we search all containers whose name contains 'visibility' and whose role contains 'Attribute'
		// we display for each of them their hierarchy	
		foreach (c0 : ContainmentView::Container) in (root.execute (cmd.find('visibility','Attribute')))
		{
			c0.execute (cmd.toString(false)).toOut();
			'--------------------------------------------------'.toOut();
			foreach (c1 : ContainmentView::Container) in (c0.execute (cmd.hierarchy()))
			{
				'    '.concat (c1.execute (cmd.toString(false)).oclAsType(!Standard::String!)).toOut();
			}
			''.toOut();
		}
		
		'\n****************************************************************************************************'.toOut();
		// we search all containers whose name contains '_' and whose role can be anything.
		// for all found containers, we replace the '_' by a '+'	
		root.execute (cmd.replace('_', '+', ''));
		root.execute (cmd.toStringDeep()).toOut();
		
		return null;
	}
}