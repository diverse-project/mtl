library Containment;

model MOF : RepositoryModel;

package Containment4MOF
{
	/** This class adapts the ContainmentView::Container to the MOF. 
		The main part of this class consists in defining the contents of
		a container according to its role; for example, if a Container
		object has the role 'Package', its content will be classes, ie
		Container objects whose role is 'Class'.
		
		Note that the class inherits from ProxyContainer that is intended
		to provide a framework for adapting metamodels defined in a 
		repository
	
		Note that the root container is defined as the set of all the packages 
		in the MOF instance.
	*/
	
	class Container extends Containment::DefaultAdapter_ProxyContainer 
	{
		aMOF : Standard::RepositoryAPI;

		/** Definition of the hierarchical structure of the adapter class. */
		getContents() : Standard::Set
		{
			if (isNull(this.contents))
			{
				this.contents := new Standard::Set ();
	
				if (getRole()='root')
				{
					foreach (aPackage : MOF::Package) 
					{
						addChild (aPackage, 'Package');
					}
				}
	
				if (getRole()='Package')
				{
					addChildrenFor (!MOF::Import!,        'Import');
					addChildrenFor (!MOF::Class!,         'Class');
					addChildrenFor (!MOF::DataType!,      'DataType');
					addChildrenFor (!MOF::PrimitiveType!, 'PrimitiveType');
				}
	
				if (getRole()='Class')
				{
					addChildrenFor (!MOF::Attribute!, 'Attribute');
					addChildrenFor (!MOF::Reference!, 'Reference');
					addChildrenFor (!MOF::Operation!, 'Operation');
					addChildrenFor (!MOF::Exception!, 'Exception');
				}
	
				if ( getRole()='Operation' or getRole()='Exception')
				{
					addChildrenFor (!MOF::Parameter!, 'Parameter');
				}
			}
			
			return this.contents;
		}
	
	
		/** Definition of the Factory Method declared in ContainmentDefaultAdapter::AbstractContainer */
		createContainer () : Containment::View_Container
		{
			return  new Containment::Containment4MOF_Container();
		}
	
		/** Definition of the Template Method primitive declared in ContainmentDefaultAdapter::ProxyContainer */
		getProxySubjectName (subject : Standard::OclAny) : Standard::String
		{
			return subject.oclAsType(!MOF::ModelElement!).name.oclAsType(!Standard::String!);
		}
	
		/** Definition of the Template Method primitive declared in ContainmentDefaultAdapter::ProxyContainer */
		setProxySubjectName (subject : Standard::OclAny;  name : Standard::String)
		{
			subject.oclAsType(!MOF::ModelElement!).name := name;
		}
	
		/** Definition of the Template Method primitive declared in ContainmentDefaultAdapter::ProxyContainer */
		initTheModel (metamodel : Standard::RepositoryAPI) 
		{
			MOF := metamodel;
		}
	
	
		/** Since all Container objects that can have non empty content, 
			we can define a single method to add all children for a given role. */
		addChildrenFor (type : Standard::OclType;  role : Standard::String)
		{
			foreach (aModelElement : MOF::ModelElement) in (getProxySubject().oclAsType(!MOF::Namespace!).contents) where (aModelElement.oclIsTypeOf(type))
			{
				addChild (aModelElement, role);
				
			}
		}
	}
}