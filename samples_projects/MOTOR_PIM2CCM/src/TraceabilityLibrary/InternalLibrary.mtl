/******************************************************************************
 * $Id: InternalLibrary.mtl,v 1.1 2004-02-09 09:56:25 edrezen Exp $
 *
 * This library is intended to provide a way to associate elements coming from
 * two different metamodels, which is useful for traceability stuff.
 *
 * In the following, we refer a source 'S' and a target 'T' metamodels. 
 *
 * The first thing to achieve this traceability is to enhance both S and T metamodels
 * with a common ancestor metaclass named 'Element', i.e. each metaclass of S must
 * be a child of S::Element and each metaclass of T must be a child of T::Element
 *
 * Each Element metaclass has an association (1 to *) to a TraceableElement (i.e. 
 * S::TraceableElement and T::TraceableElement). Each TraceableElement has the 
 * following features :
 *    - uid   : unique identifier of a linked element instanciated from the other metamodel
 *    - role  : name of the role of the linked element
 *
 * One can see this mechanism as an implementation of the association generalized for
 * linking two metamodels (i.e., we are not bound to define associations only inside a
 * given metamodel.
 *
 * Note that this enhancement of the two metamodels S and T could be done as a 
 * transformation (to be written) of a model of the MOF metamodel. Such a transformation
 * should be quiet easy to write.
 *
 * When the source and target metamodels have been enhanced, the Traceability class provides
 * the following public methods : 
 *    - init : initialization of a Traceability object after instanciation
 *    - associateElementToElement : associate two Element objects
 *    - getAssociationSet : retrieve the elements set given a Element object and the 
 *                          association end role
 *
 * Note : This library has been designed to link elements between two distinct metamodels,
 * but it can also be used with the identical source and target metamodels; this could be
 * useful to add dynamically new associations in a metamodel, only during the MTL program
 * runs.
 *
 ******************************************************************************/

library TraceabilityLibrary;

class InternalTraceability extends EnhancedMetamodelsTraceability
{
	/******************************************************************************
	 * name       : addTraceableElement
	 * remark     : 
	 ******************************************************************************/
	addTraceableElement (
		sourceElement : SourceMetamodel::Element;
		sourceRole    : Standard::String;
		targetElement : TargetMetamodel::Element;
		targetRole    : Standard::String
	)
	{
		Source_addTraceableElement (sourceElement, targetElement, targetRole);
		Target_addTraceableElement (targetElement, sourceElement, sourceRole);		
	}


	/******************************************************************************
	 * name       : Source_getAssociationSet
	 * purpose    : see getAssociationSet (specialized for Source side)
	 * visibility : private
	 * remark     : this specialization exists due to type constraints
	 ******************************************************************************/
	
	Source_getAssociationSet (
		element : SourceMetamodel::Element;
		role    : Standard::String
	) : Standard::Set
	{
		result           : Standard::Set;
		elementIterator  : Standard::Iterator;
		retrievedElement : TargetMetamodel::Element;
		item             : SourceMetamodel::TraceableElement;
		itemId           : Standard::String;
		itemRole         : Standard::String;
		
		// we instanciate the result set	
		result := new Standard::Set();
	
		// we loop over the traceable elements of the given element
		elementIterator := element.tracedElements.getNewIterator();
		elementIterator.start();
		while (elementIterator.isOn() )
		{	
			// we retrieve information about the current traceable item
			item     := elementIterator.item().oclAsType(!SourceMetamodel::TraceableElement!);
			itemId   := item.uid;
			itemRole := item.role;
	
			// if the role is the wanted one, we may add it to the result
			if (itemRole.[=](role) )
			{
				retrievedElement := Target_getElementById (itemId);
				if isNull(retrievedElement).[not]()
				{
					result := result.including (retrievedElement);
				}
			}
			
			elementIterator.next();
		}
	
		return result;
	}

	
	/******************************************************************************
	 * name       : Source_addTraceableElement
	 * purpose    : add an element of traceability for a given element
	 * visibility : private
	 * in         : sourceElement : element that receive the element of traceability
	 *              targetElement : element to be traced
	 *              role          : role of the targetElement in the association end
	 * out        : none
	 * remark     : add done in the source metamodel
	 ******************************************************************************/
	
	Source_addTraceableElement (
		sourceElement : SourceMetamodel::Element;
		targetElement : TargetMetamodel::Element;
		role          : Standard::String
	)
	{
		traceableElement : SourceMetamodel::TraceableElement;
		
		// we instanciate a new tracability element for the source element
		traceableElement := new SourceMetamodel::TraceableElement ();
	
		// we set its attributes
		traceableElement.uid   := targetElement.oclUid();
		traceableElement.role := role;
	
		// we link the tracability element to the source element 
		associate ( 
			tracer         := sourceElement    : SourceMetamodel::Element,
			tracedElements := traceableElement : SourceMetamodel::TraceableElement
		);			
	}
	
	
	/******************************************************************************
	 * name       : Target_addTraceableElement
	 * purpose    : add an element of traceability for a given element
	 * visibility : private
	 * in         : sourceElement : element that receive the element of traceability
	 *              targetElement : element to be traced
	 *              role          : role of the targetElement in the association end
	 * out        : none
	 * remark     : add done in the target metamodel
	 ******************************************************************************/
	
	Target_addTraceableElement (
		targetElement : TargetMetamodel::Element;
		sourceElement : SourceMetamodel::Element;
		role          : Standard::String
	)
	{
		traceableElement : TargetMetamodel::TraceableElement;
		
		// we instanciate a new tracability element for the source element
		traceableElement := new TargetMetamodel::TraceableElement ();
	
		// we set its attributes
		traceableElement.uid   := sourceElement.oclUid();
		traceableElement.role := role;
	
		// we link the tracability element to the source element 
		associate ( 
			tracer         := targetElement    : TargetMetamodel::Element,
			tracedElements := traceableElement : TargetMetamodel::TraceableElement
		);			
	}

	
	/******************************************************************************
	 * name       : Source_deleteElement
	 * purpose    : see deleteElement
	 * visibility : private
	 ******************************************************************************/
	
	Source_deleteElement (element : SourceMetamodel::Element) 
	{
		traceableIterator : Standard::Iterator;
		traceableElement  : TargetMetamodel::TraceableElement;
		traceableId       : Standard::String;
				
		// we retrieve in the target model all elements that reference the current source element
		// in a traceability association. This means that we get all TargetMetamodel::TraceableElement
		// whose uid is the same as the current one, and then delete them.
		traceableIterator := !TargetMetamodel::TraceableElement!.allInstances().getNewIterator();
		traceableIterator.start ();
		while (traceableIterator.isOn())
		{
			traceableElement := traceableIterator.item().oclAsType (!TargetMetamodel::TraceableElement!);
			traceableId      := traceableElement.uid;
					
			//if (traceableId.[=](element.uid))
			//{
			//	delete (traceableElement);
			//}
			traceableIterator.next();
		}
		
		// now we can delete the source element itself
		//delete (element);
	}


	/******************************************************************************
	 * name       : Target_deleteElement
	 * purpose    : see deleteElement
	 * visibility : private
	 ******************************************************************************/
	
	Target_deleteElement (element : TargetMetamodel::Element) 
	{
		traceableIterator : Standard::Iterator;
		traceableElement  : SourceMetamodel::TraceableElement;
		traceableId       : Standard::String;
				
		// we retrieve in the source model all elements that reference the current target element
		// in a traceability association. This means that we get all SourceMetamodel::TraceableElement
		// whose uid is the same as the current one, and then delete them.
		traceableIterator := !SourceMetamodel::TraceableElement!.allInstances().getNewIterator();
		traceableIterator.start ();
		while (traceableIterator.isOn())
		{
			traceableElement := traceableIterator.item().oclAsType (!SourceMetamodel::TraceableElement!);
			traceableId      := traceableElement.uid;
					
			//if (traceableId.[=](element.uid))
			//{
			//	delete (traceableElement);
			//}
			traceableIterator.next();
		}
		
		// now we can delete the target element itself
		//delete (element);
	}

}	