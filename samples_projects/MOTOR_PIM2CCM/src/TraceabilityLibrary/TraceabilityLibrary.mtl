/******************************************************************************
 * $Id: TraceabilityLibrary.mtl,v 1.3 2004-02-09 09:56:24 edrezen Exp $
 *
 * This library is intended to provide a way to associate elements coming from
 * two different metamodels, which is useful for traceability stuff.
 *
 * In the following, we refer a source 'S' and a target 'T' metamodels. 
 *
 * The first thing to achieve this traceability is to enhance both S and T metamodels
 * with a common ancestor metaclass named 'Element', i.e. each metaclass of S must
 * be a child of S::Element and each metaclass of T must be a child of T::Element
 *
 * Each Element metaclass has an association (1 to *) to a TraceableElement (i.e. 
 * S::TraceableElement and T::TraceableElement). Each TraceableElement has the 
 * following features :
 *    - uid   : unique identifier of a linked element instanciated from the other metamodel
 *    - role  : name of the role of the linked element
 *
 * One can see this mechanism as an implementation of the association generalized for
 * linking two metamodels (i.e., we are not bound to define associations only inside a
 * given metamodel.
 *
 * Note that this enhancement of the two metamodels S and T could be done as a 
 * transformation (to be written) of a model of the MOF metamodel. Such a transformation
 * should be quiet easy to write.
 *
 * When the source and target metamodels have been enhanced, the Traceability class provides
 * the following public methods : 
 *    - associateElementToElement : associate two Element objects
 *    - getAssociationSet : retrieve the elements set given a Element object and the 
 *                          association end role
 *    - delete
 *
 * Note : This library has been designed to link elements between two distinct metamodels,
 * but it can also be used with the identical source and target metamodels; this could be
 * useful to add dynamically new associations in a metamodel, only during the MTL program
 * runs.
 *
 ******************************************************************************/

library TraceabilityLibrary;

class TraceabilityInterface
{

	/******************************************************************************
	 * name       : init
	 * purpose    : initialization of a Traceability object
	 * visibility : public
	 * in         : source : source model
	 *            : target : target model
	 * out        : none
	 * remark     : must be called after instanciation of the object
	 * example    : 
	 ******************************************************************************/

	init (
		driver : MDRDriver::MDRModelManager;
		source : RepositoryModel;
		target : RepositoryModel
	)
	{
		'ERROR, TraceabilityLibrary::TraceabilityInterface::init() is abstract'.toOut();
	}


	/******************************************************************************
	 * name       : associateElementToElement
	 * purpose    : associate two Element objects through two given roles
	 * visibility : public
	 * in         : sourceElement : source Element object to be linked
	 *              sourceRole    : role of the source Element object in the association
	 *              targetElement : target Element object to be linked
	 *              targetRole    : role of the target Element object in the association
	 * out        : none
	 * remark     : NO CHECK IS DONE TO SEE IF THE TWO ELEMENTS ARE ALREADY ASSOCIATED
	 * example    : associateElementToElement (e1,'owner', e2,'feature');
	 ******************************************************************************/

	associateElementToElement (
		sourceElement : SourceMetamodel::Element;
		sourceRole    : Standard::String;
		targetElement : TargetMetamodel::Element;
		targetRole    : Standard::String
	)
	{
		'ERROR, TraceabilityLibrary::TraceabilityInterface::associateElementToElement() is abstract'.toOut();
	}
	
	
	/******************************************************************************
	 * name       : getAssociationSet
	 * purpose    : retrieve the set of elements linked to an element for a given role
	 * visibility : public
	 * in         : element : element to get the association end from
	 *              role    : name of the association end
	 * out        : set of elements
	 * remark     : the result set may be empty but always instanciated
	 * example    : getAssociation (class, 'feature');
	 ******************************************************************************/
	
	getAssociationSet (
		element : Standard::ModelElement;
		role    : Standard::String
	) : Standard::Set
	{
		'ERROR, TraceabilityLibrary::TraceabilityInterface::getAssociationSet() is abstract'.toOut();
		return null;
	}


	/******************************************************************************
	 * name       : deleteElement
	 * purpose    : delete an element and update its traceability associations
	 * visibility : public
	 * in         : element : element to be deleted
	 * out        : 
	 * remark     : 
	 ******************************************************************************/
	
	deleteElement (element : Standard::ModelElement) 
	{
		'ERROR, TraceabilityLibrary::TraceabilityInterface::deleteElement() is abstract'.toOut();
	}
}	